<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lion&#39;s Blog</title>
  
  <subtitle>寻找更优秀的人同行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linnok.github.io/"/>
  <updated>2019-01-21T11:55:42.441Z</updated>
  <id>https://linnok.github.io/</id>
  
  <author>
    <name>Lion heart</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://linnok.github.io/2019/01/21/hello-world/"/>
    <id>https://linnok.github.io/2019/01/21/hello-world/</id>
    <published>2019-01-21T11:55:42.441Z</published>
    <updated>2019-01-21T11:55:42.441Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p><img src="http://b.hiphotos.baidu.com/image/h%3D300/sign=08b730528f025aafcc3278cbcbecab8d/f3d3572c11dfa9ec53b720856fd0f703908fc183.jpg" alt="avatar"></p><p><img src="D:\image/hello-world0.png" alt="ssss"><br><img src="/home/linux-server-build108/share/image/ji.png" alt="ss"><br><img src="img/1.png"></p><p><img src="/images/1.png" alt="dd"></p><p><img src="/img/ee.png" alt="d"></p><p><img src="/images/ji.png" alt="d" title="ssssss"></p><p><img src="/images/a.jpg" alt="d" title="sss"><br>images</p><p>###rgreg<br>edferfdd<br>伟大的无多无群多的 我的钱无</p><h3 id="插入图片测试"><a href="#插入图片测试" class="headerlink" title="插入图片测试"></a>插入图片测试</h3><p><img src="/images/hello-world0.png" alt=""></p><h3 id="二次测试"><a href="#二次测试" class="headerlink" title="二次测试"></a>二次测试</h3><p><img src="/images/hello-world1.png" alt=""></p><font color="red">xx</font> <font color="#ff0000"><strong>size</strong></font><br><font color="#ff0000"><strong>往欧尼轻</strong></font><font color="#ff0000">往欧尼轻</font><font color="#ff0000"><strong>不在</strong></font><font color="#ffa500"><strong>沉</strong></font>默<font color="#ffff00"><strong>中</strong></font>爆<font color="#00ff00"><strong>发</strong></font>，就在<font color="#0000ff"><strong>沉</strong></font><font color="#ff0000"><strong>默中</strong></font><font color="#800080"><strong>灭亡</strong></font>。<br><br>color=#00ffff**<br><br><font size="3">color=#00ffff</font><font color="#ff0000" size="4"><strong>color=#00ffff</strong></font><p>我<font size="2">看</font><font size="4"><font s*~~ize~~="*3">都</font><font size="4">买</font><font size="5">了</font><strong>**</strong></font></p><p>kernel    内核管理相关，进程调度等    sched/fork等<br>fs    文件子系统    ext4/f2fs/fuse/debugfs/proc等</p><table><thead><tr><th>header 1</th><th>header 2</th><th>jj</th></tr></thead><tbody><tr><td>kernel</td><td>内核管理相关，进程调度等</td><td>sched/fork等</td></tr><tr><td>fs</td><td>文件子系统</td><td>ext4/f2fs/fuse/debugfs/proc等</td></tr></tbody></table><p>莺歌1中0</p><p>==球哥4中1==</p><font size="5">哈特4中0</font><br><font color="#00ff00"><strong>球师弟3中1</strong></font><p>最近几天在看关于<font size="4"><strong>Android系统开机启动过程的相关</strong></font>内容。做个笔记dddddss。</p><p>Idina Menze和Caleb Hyles激情对唱Let It Go： </p><iframe height="498" width="510" src="http://video.tudou.com/v/XNDAxMjU1MzQ5Ng==.html" frameborder="0" allowfullscreen><br></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Telephony" scheme="https://linnok.github.io/categories/Telephony/"/>
    
    
  </entry>
  
  <entry>
    <title>Android7.0 拨号盘应用源码分析</title>
    <link href="https://linnok.github.io/2018/12/15/Android7.0%20%E6%8B%A8%E5%8F%B7%E7%9B%98%E5%BA%94%E7%94%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://linnok.github.io/2018/12/15/Android7.0 拨号盘应用源码分析/</id>
    <published>2018-12-15T09:26:12.000Z</published>
    <updated>2019-01-07T10:47:17.201Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>android拨号盘的源码目录在package/app/Dialer</p><p>自7.0以后Incallui的源码直接放到了Dialer目录下，虽然在7.0以前incallui有自己独立的目录，但实际编译过程中只是作为链接库最后还是被编译到Dialer的apk里</p><p>博主这里只取Dialer相关的源码并导入AS中，并稍作调整兼容至L</p><h5 id="源码目录结构如下："><a href="#源码目录结构如下：" class="headerlink" title="源码目录结构如下："></a>源码目录结构如下：</h5><p><img src="FB9D778072D0486D898B64042F8FA8BB" alt="image"></p><p>先理一理各个工程的依赖关系</p><p><strong>com.android.dialer</strong>是主工程依赖于</p><p><strong>com.android.contacts.common</strong>工程和<strong>com.android.phone.common</strong>工程</p><p><strong>com.android.contacts.common</strong>又依赖于</p><p><strong>com.android.phone.common</strong>工程和<strong>com.android.common</strong>工程</p><h4 id="1-1拨号盘概览"><a href="#1-1拨号盘概览" class="headerlink" title="1.1拨号盘概览"></a>1.1拨号盘概览</h4><p>先来看看几张原图<br><img src="673CB837DDAE44A2BF0366E591EB1F8F" alt="image"></p><p><img src="6D9FB9DC04394BFC9678894B1ACE0553" alt="image"></p><h4 id="1-2-DialtactsActivity"><a href="#1-2-DialtactsActivity" class="headerlink" title="1.2 DialtactsActivity"></a>1.2 DialtactsActivity</h4><p><img src="E11E9264D152477196CE74D611687C2C" alt="image"></p><p>主activity为DialtactsActivity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">com.android.dialer.DialtactsActivity</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DialtactsActivity</span> <span class="keyword">extends</span> <span class="title">TransactionSafeActivity</span> 。。。</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fragment containing the dialpad that slides into view</span></span><br><span class="line">    <span class="keyword">protected</span> DialpadFragment mDialpadFragment;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Fragment for searching phone numbers using the alphanumeric keyboard.</span></span><br><span class="line">    <span class="keyword">private</span> RegularSearchFragment mRegularSearchFragment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fragment for searching phone numbers using the dialpad.</span></span><br><span class="line">    <span class="keyword">private</span> SmartDialSearchFragment mSmartDialSearchFragment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fragment containing the speed dial list, call history list, and all contacts list.    </span></span><br><span class="line">    <span class="keyword">private</span> ListsFragment mListsFragment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DialerDatabaseHelper mDialerDatabaseHelper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FloatingActionButtonController mFloatingActionButtonController;</span><br><span class="line"></span><br><span class="line">    ...... ......</span><br><span class="line">    ...... .....</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">om.android.dialer.dialpad .DialpadFragment <span class="comment">// 拨号盘fragment</span></span><br><span class="line"></span><br><span class="line">com.android.dialer.list.RegularSearchFragment <span class="comment">// 联系人搜索fragment</span></span><br><span class="line"></span><br><span class="line">com.android.dialer.list.SmartDialSearchFragment <span class="comment">// 拨号搜索fragment</span></span><br><span class="line"></span><br><span class="line">com.android.dialer.list.ListsFragment <span class="comment">// TAB页fragment，包含快速联系人，最近通话记录，联系人列表三个子fragment</span></span><br><span class="line"></span><br><span class="line">com.android.dialer.database.DialerDatabaseHelper <span class="comment">// 拨号搜索数据库SQLiteOpenHelper对象</span></span><br><span class="line"></span><br><span class="line">com.android.contacts.common.widget.FloatingActionButtonController <span class="comment">// 悬浮按钮控制器</span></span><br></pre></td></tr></table></figure><p>再看看onCreate里的主要实现（部分内容省略）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    setContentView(R.layout.dialtacts_activity);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ActionBar actionBar = getSupportActionBar();</span><br><span class="line">    actionBar.setCustomView(R.layout.search_edittext);</span><br><span class="line">    <span class="comment">// 给actionbar设置自定义view （SearchEditTextLayout）</span></span><br><span class="line">    SearchEditTextLayout searchEditTextLayout = (SearchEditTextLayout) actionBar</span><br><span class="line">    .getCustomView().findViewById(R.id.search_view_container);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给SearchEditTextLayout添加管理器ActionBarController</span></span><br><span class="line">    mActionBarController = <span class="keyword">new</span> ActionBarController(<span class="keyword">this</span>, searchEditTextLayout);</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">final</span> View floatingActionButtonContainer = findViewById(</span><br><span class="line">            R.id.floating_action_button_container);</span><br><span class="line">  ImageButton floatingActionButton = (ImageButton) findViewById(R.id.floating_action_button);</span><br><span class="line">  floatingActionButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">   <span class="comment">// 用FloatingActionButtonController管理悬浮按钮</span></span><br><span class="line">  mFloatingActionButtonController = <span class="keyword">new</span> FloatingActionButtonController(<span class="keyword">this</span>,</span><br><span class="line">     floatingActionButtonContainer, floatingActionButton);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 添加ListsFragment</span></span><br><span class="line">    getFragmentManager().beginTransaction()</span><br><span class="line">        .add(R.id.dialtacts_frame, <span class="keyword">new</span> ListsFragment(), TAG_FAVORITES_FRAGMENT)</span><br><span class="line">        .commit();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化单例对象DialerDatabaseHelper</span></span><br><span class="line">   mDialerDatabaseHelper = DatabaseHelperManager.getDatabaseHelper(<span class="keyword">this</span>);</span><br><span class="line">  SmartDialPrefix.initializeNanpSettings(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-ListsFragment"><a href="#1-3-ListsFragment" class="headerlink" title="1.3 ListsFragment"></a>1.3 ListsFragment</h4><p>ListsFragment是主fragment，结构如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListsFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> ViewPager mViewPager;</span><br><span class="line">    <span class="keyword">private</span> ViewPagerTabs mViewPagerTabs;  </span><br><span class="line">    <span class="comment">// 自定义TAB标签，继承自HorizontalScrollView</span></span><br><span class="line">    <span class="keyword">private</span> ViewPagerAdapter mViewPagerAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拖拽常用联系人时悬浮视图</span></span><br><span class="line">    <span class="keyword">private</span> RemoveView mRemoveView;</span><br><span class="line">    <span class="keyword">private</span> View mRemoveViewContent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常用联系人fragment</span></span><br><span class="line">    <span class="keyword">private</span> SpeedDialFragment mSpeedDialFragment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最近通话记录fragment</span></span><br><span class="line">    <span class="keyword">private</span> CallLogFragment mHistoryFragment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 联系人列表fragment</span></span><br><span class="line">    <span class="keyword">private</span> AllContactsFragment mAllContactsFragment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Voicemail列表fragment</span></span><br><span class="line">    <span class="keyword">private</span> CallLogFragment mVoicemailFragment;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">            Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">final</span> View parentView = inflater.inflate(R.layout.lists_fragment, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        mViewPager = (ViewPager) parentView.findViewById(R.id.lists_pager);</span><br><span class="line">        mViewPagerAdapter = <span class="keyword">new</span> ViewPagerAdapter(getChildFragmentManager());</span><br><span class="line">        mViewPager.setAdapter(mViewPagerAdapter);</span><br><span class="line">        mViewPager.setOffscreenPageLimit(TAB_COUNT_WITH_VOICEMAIL - <span class="number">1</span>);</span><br><span class="line">        mViewPager.setOnPageChangeListener(<span class="keyword">this</span>);</span><br><span class="line">        showTab(TAB_INDEX_SPEED_DIAL);</span><br><span class="line"></span><br><span class="line">        ...... ......  ...... ......</span><br><span class="line"></span><br><span class="line">        mViewPagerTabs = (ViewPagerTabs) parentView.findViewById(R.id.lists_pager_header);</span><br><span class="line">        mViewPagerTabs.configureTabIcons(mTabIcons);</span><br><span class="line">        mViewPagerTabs.setViewPager(mViewPager);</span><br><span class="line">        addOnPageChangeListener(mViewPagerTabs);</span><br><span class="line"></span><br><span class="line">        mRemoveView = (RemoveView) parentView.findViewById(R.id.remove_view);</span><br><span class="line">        mRemoveViewContent = parentView.findViewById(R.id.remove_view_content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parentView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ListsFragment最多可以显示四个fragment，有个VisualVoicemailCallLogFragment显示一种特定的通话记录（提供视频语音邮件服务）</p><p>类型为Calls.VOICEMAIL_TYPE，需要运营商支持，只有存在该类通话记录才会显示该TAB页，国内运营商暂不支持</p><p><img src="15D223D8DAF4439B85EEA207E1D66170" alt="image">‘</p><p>SpeedDialFragment显示常用联系人列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpeedDialFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> ...</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示数据的GridView列表</span></span><br><span class="line">    <span class="keyword">private</span> PhoneFavoriteListView mListView;    </span><br><span class="line"></span><br><span class="line">   <span class="comment">// 源数据BaseAdapter</span></span><br><span class="line">    <span class="keyword">private</span> PhoneFavoritesTileAdapter mContactTileAdapter;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查询源数据的LoaderCallbacks</span></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ContactTileLoaderListener</span> <span class="keyword">implements</span> <span class="title">LoaderManager</span>.<span class="title">LoaderCallbacks</span>&lt;<span class="title">Cursor</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CursorLoader <span class="title">onCreateLoader</span><span class="params">(<span class="keyword">int</span> id, Bundle args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">"ContactTileLoaderListener#onCreateLoader."</span>);</span><br><span class="line">            <span class="keyword">return</span> ContactTileLoaderFactory.createStrequentPhoneOnlyLoader(getActivity());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFinished</span><span class="params">(Loader&lt;Cursor&gt; loader, Cursor data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">"ContactTileLoaderListener#onLoadFinished"</span>);</span><br><span class="line">            mContactTileAdapter.setContactCursor(data);</span><br><span class="line">            setEmptyViewVisibility(mContactTileAdapter.getCount() == <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoaderReset</span><span class="params">(Loader&lt;Cursor&gt; loader)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">"ContactTileLoaderListener#onLoaderReset. "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用LoadManager方式获取cursor数据，查询ContactsProvider数据库的data表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com.android.contacts.common.ContactTileLoaderFactory</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CursorLoader <span class="title">createStrequentPhoneOnlyLoader</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">     Uri uri = Contacts.CONTENT_STREQUENT_URI.buildUpon()</span><br><span class="line">          .appendQueryParameter(ContactsContract.STREQUENT_PHONE_ONLY, <span class="string">"true"</span>).build();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> CursorLoader(context, uri, COLUMNS_PHONE_ONLY, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据来源包括收藏的联系人以及有通话记录的联系人</p><h4 id="1-4-DialpadFragment"><a href="#1-4-DialpadFragment" class="headerlink" title="1.4 DialpadFragment"></a>1.4 DialpadFragment</h4><p>DialpadFragment显示拨号盘fragment</p><p>在DialtactsActivity中添加如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showDialpadFragment</span><span class="params">(<span class="keyword">boolean</span> animate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mDialpadFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mDialpadFragment = <span class="keyword">new</span> DialpadFragment();</span><br><span class="line">            ft.add(R.id.dialtacts_container, mDialpadFragment, TAG_DIALPAD_FRAGMENT);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ft.show(mDialpadFragment);</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>第一次显示时动态添加进去，后续动态控制显示隐藏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DialpadFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> DialpadView mDialpadView; <span class="comment">// 拨号数字面板（包括输入号码框）</span></span><br><span class="line">  <span class="keyword">private</span> EditText mDigits;          <span class="comment">// 输入号码框</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ToneGenerator mToneGenerator; <span class="comment">// DTMF音播放器</span></span><br><span class="line">  <span class="keyword">private</span> ListView mDialpadChooser;     <span class="comment">// 通话状态时显示的视图</span></span><br><span class="line">  <span class="keyword">private</span> DialpadChooserAdapter mDialpadChooserAdapter;</span><br><span class="line">  <span class="comment">// 通话状态时显示的视图adapter</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 横竖屏加载不同的布局</span></span><br><span class="line">        <span class="keyword">final</span> View fragmentView = inflater.inflate(R.layout.dialpad_fragment, container,</span><br><span class="line">                <span class="keyword">false</span>);</span><br><span class="line">        fragmentView.buildLayer();</span><br><span class="line"></span><br><span class="line">        mDialpadView = (DialpadView) fragmentView.findViewById(R.id.dialpad_view);</span><br><span class="line">        mDialpadView.setCanDigitsBeEdited(<span class="keyword">true</span>);</span><br><span class="line">        mDigits = mDialpadView.getDigits();</span><br><span class="line">        ...... ........... ......</span><br><span class="line">        PhoneNumberFormatter.setPhoneNumberFormattingTextWatcher(getActivity(), mDigits);  <span class="comment">// 格式化输入框中的号码</span></span><br><span class="line">        <span class="comment">// Check for the presence of the keypad</span></span><br><span class="line">        View oneButton = fragmentView.findViewById(R.id.one);</span><br><span class="line">        <span class="keyword">if</span> (oneButton != <span class="keyword">null</span>) &#123;  <span class="comment">// 绑定各个数字按键onPress事件</span></span><br><span class="line">            configureKeypadListeners(fragmentView);</span><br><span class="line">        &#125;</span><br><span class="line">       ...... ............ ......</span><br><span class="line">        mDialpadChooser = (ListView) fragmentView.findViewById(R.id.dialpadChooser);</span><br><span class="line">        mDialpadChooser.setOnItemClickListener(<span class="keyword">this</span>);</span><br><span class="line">        ...... ..... ...... ......</span><br><span class="line">        <span class="keyword">return</span> fragmentView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>横屏和竖屏所加载的拨号面板布局是不一样的</p><p><img src="C2B30B7AF67E499FA430A708835E3CFC" alt="image"></p><p>DialpadView是个自定义视图，主要用于显示数字按键和输入号码框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DialpadView</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText mDigits;     <span class="comment">// 输入号码框</span></span><br><span class="line">    <span class="keyword">private</span> ImageButton mDelete; <span class="comment">// 删除按钮</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupKeypad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...... ............ ......</span><br><span class="line">        DialpadKeyButton dialpadKey;</span><br><span class="line">        TextView numberView;</span><br><span class="line">        TextView lettersView;</span><br><span class="line">         ...... ............ ......</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mButtonIds.length; i++) &#123;</span><br><span class="line">            dialpadKey = (DialpadKeyButton) findViewById(mButtonIds[i]);</span><br><span class="line">            numberView = (TextView) dialpadKey.findViewById(R.id.dialpad_key_number);</span><br><span class="line">            lettersView = (TextView) dialpadKey.findViewById(R.id.dialpad_key_letters);</span><br><span class="line">          ...... ............ ......</span><br><span class="line">            <span class="keyword">final</span> RippleDrawable rippleBackground = (RippleDrawable)</span><br><span class="line">                    getDrawableCompat(getContext(), R.drawable.btn_dialpad_key);</span><br><span class="line">            <span class="keyword">if</span> (mRippleColor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                rippleBackground.setColor(mRippleColor);            &#125;</span><br><span class="line"></span><br><span class="line">            numberView.setText(numberString);</span><br><span class="line">            numberView.setElegantTextHeight(<span class="keyword">false</span>);</span><br><span class="line">            dialpadKey.setContentDescription(numberContentDescription);</span><br><span class="line">            dialpadKey.setBackground(rippleBackground); <span class="comment">// 设置数字按键水波纹背景色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lettersView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                lettersView.setText(resources.getString(letterIds[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         ...... ............ ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">animateShow</span><span class="params">()</span> </span>&#123;  <span class="comment">// 显示拨号面板时各个数字按键的动画效果</span></span><br><span class="line">            ...... ............ ......</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mButtonIds.length; i++) &#123;</span><br><span class="line">             ...... ............ ......</span><br><span class="line">            ViewPropertyAnimator animator = dialpadKey.animate();</span><br><span class="line">            <span class="keyword">if</span> (mIsLandscape) &#123;</span><br><span class="line">                <span class="comment">// Landscape orientation requires translation along the X axis.</span></span><br><span class="line">                <span class="comment">// For RTL locales, ensure we translate negative on the X axis.</span></span><br><span class="line">                dialpadKey.setTranslationX((mIsRtl ? -<span class="number">1</span> : <span class="number">1</span>) * mTranslateDistance);</span><br><span class="line">                animator.translationX(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Portrait orientation requires translation along the Y axis.</span></span><br><span class="line">                dialpadKey.setTranslationY(mTranslateDistance);</span><br><span class="line">                animator.translationY(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            animator.setInterpolator(AnimUtils.EASE_OUT_EASE_IN)</span><br><span class="line">                    .setStartDelay(delay)</span><br><span class="line">                    .setDuration(duration)</span><br><span class="line">                    .setListener(showListener)</span><br><span class="line">                    .start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当处于通话状态时显示如下</p><p><img src="32CACB6651F6463FBF729C1B1572FB64" alt="image"></p><h4 id="1-5SmartDialSearchFragment-RegularSearchFragment"><a href="#1-5SmartDialSearchFragment-RegularSearchFragment" class="headerlink" title="1.5SmartDialSearchFragment RegularSearchFragment"></a>1.5SmartDialSearchFragment RegularSearchFragment</h4><p>SmartDialSearchFragment显示拨号搜索结果fragment（在拨号面板输入数字时显示）</p><p>RegularSearchFragment显示联系人搜索结果fragment（在actionbar输入框输入字符时显示）</p><p>在DialtactsActivity中进入或退出搜索模式时动态添加移除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enterSearchUi</span><span class="params">(<span class="keyword">boolean</span> smartDialSearch, String query, <span class="keyword">boolean</span> animate)</span> </span>&#123;</span><br><span class="line">         ...... ............ ......</span><br><span class="line">        <span class="keyword">if</span> (fragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (smartDialSearch) &#123;</span><br><span class="line">                fragment = <span class="keyword">new</span> SmartDialSearchFragment();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fragment = ObjectFactory.newRegularSearchFragment();</span><br><span class="line">                  ...... ............ ......</span><br><span class="line">            &#125;</span><br><span class="line">            transaction.add(R.id.dialtacts_frame, fragment, tag);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            transaction.show(fragment);</span><br><span class="line">        &#125;</span><br><span class="line">         ...... ............ ......</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exitSearchUi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         ...... ............ ......</span><br><span class="line">        <span class="keyword">final</span> FragmentTransaction transaction = getFragmentManager().beginTransaction();</span><br><span class="line">        <span class="keyword">if</span> (mSmartDialSearchFragment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            transaction.remove(mSmartDialSearchFragment);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mRegularSearchFragment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            transaction.remove(mRegularSearchFragment);</span><br><span class="line">        &#125;</span><br><span class="line">        transaction.commit();</span><br><span class="line"></span><br><span class="line">        mListsFragment.getView().animate().alpha(<span class="number">1</span>).withLayer();</span><br><span class="line">         ...... ............ ......</span><br><span class="line">        mActionBarController.onSearchUiExited();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="2AF107E2F071468C94676CCA08387D15" alt="image"></p><p>拨号搜素只能通过拨号面板的输入数字，支持T9搜索，但是原生不支持拼音检索</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartDialSearchFragment</span> <span class="keyword">extends</span> <span class="title">SearchFragment</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ContactEntryListAdapter <span class="title">createListAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SmartDialNumberListAdapter adapter = </span><br><span class="line">            <span class="keyword">new</span> SmartDialNumberListAdapter(getActivity());</span><br><span class="line">        adapter.setUseCallableUri(<span class="keyword">super</span>.usesCallableUri());</span><br><span class="line">        adapter.setQuickContactEnabled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// Set adapter's query string to restore previous instance state.</span></span><br><span class="line">        adapter.setQueryString(getQueryString());</span><br><span class="line">        adapter.setListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Loader&lt;Cursor&gt; <span class="title">onCreateLoader</span><span class="params">(<span class="keyword">int</span> id, Bundle args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Smart dialing does not support Directory Load, falls back to normal search instead.</span></span><br><span class="line">        <span class="keyword">if</span> (id == getDirectoryLoaderId()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onCreateLoader(id, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> SmartDialNumberListAdapter adapter = </span><br><span class="line">                 (SmartDialNumberListAdapter) getAdapter();</span><br><span class="line">            SmartDialCursorLoader loader = <span class="keyword">new</span> SmartDialCursorLoader(<span class="keyword">super</span>.getContext());</span><br><span class="line">            adapter.configureLoader(loader);</span><br><span class="line">            <span class="keyword">return</span> loader;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="7966A3D3619441619A695B08E2734384" alt="image"></p><p>联系人搜索则通过软键盘输入，不过不支持T9搜索</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegularSearchFragment</span> <span class="keyword">extends</span> <span class="title">SearchFragment</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ContactEntryListAdapter <span class="title">createListAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RegularSearchListAdapter adapter = <span class="keyword">new</span> RegularSearchListAdapter(getActivity());</span><br><span class="line">        adapter.setDisplayPhotos(<span class="keyword">true</span>);</span><br><span class="line">        adapter.setUseCallableUri(usesCallableUri());</span><br><span class="line">        adapter.setListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从类关系图上可以得知两个fragment和对应的adapter都继承于同一个父类，最终都派生自ContactsCommon工程里的模板类ContactEntryListFragment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ContactEntryListFragment</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">ContactEntryListAdapter</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T mAdapter;          <span class="comment">// 模板adapter</span></span><br><span class="line">    <span class="keyword">private</span> View mView;</span><br><span class="line">    <span class="keyword">private</span> ListView mListView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ContactPhotoManager mPhotoManager;  <span class="comment">// 头像管理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> View <span class="title">inflateView</span><span class="params">(LayoutInflater inflater, ViewGroup container)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">createListAdapter</span><span class="params">()</span></span>;        <span class="comment">// 子类中实现具体adapter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>   <span class="comment">// 子类可重写获取数据的Loader</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Loader&lt;Cursor&gt; <span class="title">onCreateLoader</span><span class="params">(<span class="keyword">int</span> id, Bundle args)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (id == DIRECTORY_LOADER_ID) &#123;</span><br><span class="line">            DirectoryListLoader loader = <span class="keyword">new</span> DirectoryListLoader(mContext);</span><br><span class="line">            loader.setDirectorySearchMode(mAdapter.getDirectorySearchMode());</span><br><span class="line">            loader.setLocalInvisibleDirectoryEnabled(</span><br><span class="line">                    ContactEntryListAdapter.LOCAL_INVISIBLE_DIRECTORY_ENABLED);</span><br><span class="line">            <span class="keyword">return</span> loader;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            CursorLoader loader = createCursorLoader(mContext);</span><br><span class="line">            <span class="keyword">long</span> directoryId = args != <span class="keyword">null</span> &amp;&amp; args.containsKey(DIRECTORY_ID_ARG_KEY)</span><br><span class="line">                    ? args.getLong(DIRECTORY_ID_ARG_KEY)</span><br><span class="line">                    : Directory.DEFAULT;</span><br><span class="line">            mAdapter.configureLoader(loader, directoryId);</span><br><span class="line">            <span class="keyword">return</span> loader;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ContactEntryListFragment内部封装了很多操作，绑定了ContactEntryListAdapter，具体细节就不在这里详述了</p><h4 id="1-6小结"><a href="#1-6小结" class="headerlink" title="1.6小结"></a>1.6小结</h4><p>最后附上Dialer里主要类图<br><img src="CE01A21D5F3F474C872516C3169B48C8" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;android拨号盘的源码目录在package/app/Dialer&lt;/p&gt;
&lt;p&gt;自7.0以后Incallui的源码直接放到了Dialer
      
    
    </summary>
    
      <category term="Telephony" scheme="https://linnok.github.io/categories/Telephony/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 系统服务TelecomService启动过程分析</title>
    <link href="https://linnok.github.io/2018/01/04/Android%20%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1TelecomService%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>https://linnok.github.io/2018/01/04/Android 系统服务TelecomService启动过程分析/</id>
    <published>2018-01-04T09:03:12.000Z</published>
    <updated>2019-01-07T10:49:44.309Z</updated>
    
    <content type="html"><![CDATA[<p>由于一直负责的是Android Telephony部分的开发工作，对于通信过程的上层部分Telecom服务以及UI都没有认真研究过。最近恰好碰到一个通话方面的问题，涉及到了Telecom部分，因而就花时间仔细研究了下相关的代码。这里做一个简单的总结。这篇文章，主要以下两个部分的内容：</p><ul><li>什么是Telecom服务?其作用是什么？</li><li>Telecom模块的启动与初始化过程；</li></ul><p>接下来一篇文章，主要以实际通话过程为例，分析下telephony收到来电后如何将电话信息发送到Telecom模块以及Telecom是如何处理来电。</p><h4 id="什么是Telecom服务"><a href="#什么是Telecom服务" class="headerlink" title="什么是Telecom服务"></a>什么是Telecom服务</h4><p>Telecom是Android的一个系统服务，其主要作用是管理Android系统当前的通话,如来电显示，接听电话，挂断电话等功能，在Telephony模块与上层UI之间起到了一个桥梁的作用。比如，Telephony有接收到新的来电时，首先会告知Telecom,然后由Telecom服务通知上层应用来电信息，并显示来电界面。</p><p>Telecom服务对外提供了一个接口类TelecomManager,通过其提供的接口，客户端可以查询通话状态，发送通话请求以及添加通话链接等。</p><p>从Telecom进程对应的AndroidManifest.xml文件来看，Telecom进程的用户ID跟系统进程用户ID相同，是系统的核心服务。那么，其中android:process=”system”这个属性值表示什么意思了？查看官方文档，这个表示Telecom将启动在进程system中，这样可以跟其他进程进行资源共享了（对于Android这个全局进程，就是SystemServer所在的进程）。</p><blockquote><h5 id="android-process"><a href="#android-process" class="headerlink" title="android:process"></a>android:process</h5><h5 id="By-setting-this-attribute-to-a-process-name-that’s-shared-with-another-application-you-can-arrange-for-components-of-both-applications-to-run-in-the-same-process-—-but-only-if-the-two-applications-also-share-a-user-ID-and-be-signed-with-the-same-certificate"><a href="#By-setting-this-attribute-to-a-process-name-that’s-shared-with-another-application-you-can-arrange-for-components-of-both-applications-to-run-in-the-same-process-—-but-only-if-the-two-applications-also-share-a-user-ID-and-be-signed-with-the-same-certificate" class="headerlink" title="By setting this attribute to a process name that’s shared with another application, you can arrange for components of both applications to run in the same process — but only if the two applications also share a user ID and be signed with the same certificate."></a>By setting this attribute to a process name that’s shared with another application, you can arrange for components of both applications to run in the same process — but only if the two applications also share a user ID and be signed with the same certificate.</h5><h5 id="If-the-name-assigned-to-this-attribute-begins-with-a-colon-‘-’-a-new-process-private-to-the-application-is-created-when-it’s-needed-If-the-process-name-begins-with-a-lowercase-character-a-global-process-of-that-name-is-created-A-global-process-can-be-shared-with-other-applications-reducing-resource-usage"><a href="#If-the-name-assigned-to-this-attribute-begins-with-a-colon-‘-’-a-new-process-private-to-the-application-is-created-when-it’s-needed-If-the-process-name-begins-with-a-lowercase-character-a-global-process-of-that-name-is-created-A-global-process-can-be-shared-with-other-applications-reducing-resource-usage" class="headerlink" title="If the name assigned to this attribute begins with a colon (‘:’), a new process, private to the application, is created when it’s needed. If the process name begins with a lowercase character, a global process of that name is created. A global process can be shared with other applications, reducing resource usage."></a>If the name assigned to this attribute begins with a colon (‘:’), a new process, private to the application, is created when it’s needed. If the process name begins with a lowercase character, a global process of that name is created. A global process can be shared with other applications, reducing resource usage.</h5></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">        xmlns:androidprv=&quot;http://schemas.android.com/apk/prv/res/android&quot;</span><br><span class="line">        package=&quot;com.android.server.telecom&quot;</span><br><span class="line">        android:versionCode=&quot;1&quot;</span><br><span class="line">        android:versionName=&quot;1.0.0&quot;</span><br><span class="line">        coreApp=&quot;true&quot;</span><br><span class="line">        android:sharedUserId=&quot;android.uid.system&quot;&gt;</span><br><span class="line"></span><br><span class="line">     &lt;application android:label=&quot;@string/telecommAppLabel&quot;</span><br><span class="line">            android:icon=&quot;@mipmap/ic_launcher_phone&quot;</span><br><span class="line">            android:allowBackup=&quot;false&quot;</span><br><span class="line">            android:supportsRtl=&quot;true&quot;</span><br><span class="line">            android:process=&quot;system&quot;</span><br><span class="line">            android:usesCleartextTraffic=&quot;false&quot;</span><br><span class="line">            android:defaultToDeviceProtectedStorage=&quot;true&quot;</span><br><span class="line">            android:directBootAware=&quot;true&quot;&gt;</span><br><span class="line">        ....</span><br><span class="line">        // 包含TelecomService</span><br><span class="line">        &lt;service android:name=&quot;.components.TelecomService&quot;</span><br><span class="line">                android:singleUser=&quot;true&quot;</span><br><span class="line">                android:process=&quot;system&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=&quot;android.telecom.ITelecomService&quot; /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/service&gt;</span><br><span class="line">    ....</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><h5 id="代码路径"><a href="#代码路径" class="headerlink" title="代码路径:"></a>代码路径:</h5><ul><li>/android/applications/sources/services/Telecomm/</li><li>/android/frameworks/base/telecomm/</li></ul><p>了解了什么是Telecom服务之后，就来看一看Telecom服务是如何启动与初始化的。</p><h4 id="Telecom进程的启动与初始化"><a href="#Telecom进程的启动与初始化" class="headerlink" title="Telecom进程的启动与初始化"></a>Telecom进程的启动与初始化</h4><p>在SystemServer进程初始化完成启动完系统的核心服务如==ActivityManagerService==后，就会加载系统其它服务,这其中就包含了一个与Telecom服务启动相关的系统服务专门用于加载Telecom：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void startOtherServices() &#123;</span><br><span class="line">        ....</span><br><span class="line">        //启动TelecomLoaderService系统服务，用于加载Telecom</span><br><span class="line">        mSystemServiceManager.startService(TelecomLoaderService.class);</span><br><span class="line">        // 启动telephony注册服务，用于注册监听telephony状态的接口</span><br><span class="line">        telephonyRegistry = new TelephonyRegistry(context);</span><br><span class="line">        ServiceManager.addService(&quot;telephony.registry&quot;, telephonyRegistry);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用系统服务管家SystemServiceManager的接口startService创建新的服务，并注册到系统中，最后调用onStart()启动服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public class SystemServiceManager &#123;</span><br><span class="line"></span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        public SystemService startService(String className) &#123;</span><br><span class="line">            final Class&lt;SystemService&gt; serviceClass;</span><br><span class="line">            try &#123;</span><br><span class="line">                serviceClass = (Class&lt;SystemService&gt;)Class.forName(className);</span><br><span class="line">            &#125; catch (ClassNotFoundException ex) &#123;</span><br><span class="line">                ....</span><br><span class="line">            &#125;</span><br><span class="line">            return startService(serviceClass);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 服务的class文件来创建新的服务对象(服务必须继承SystemService)</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        public &lt;T extends SystemService&gt; T startService(Class&lt;T&gt; serviceClass) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                final String name = serviceClass.getName();</span><br><span class="line">                Slog.i(TAG, &quot;Starting &quot; + name);</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER, &quot;StartService &quot; + name);</span><br><span class="line"></span><br><span class="line">                // Create the service.</span><br><span class="line">                if (!SystemService.class.isAssignableFrom(serviceClass)) &#123;</span><br><span class="line">                    throw new RuntimeException(&quot;Failed to create &quot; + name</span><br><span class="line">                            + &quot;: service must extend &quot; + SystemService.class.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                final T service;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Constructor&lt;T&gt; constructor = serviceClass.getConstructor(Context.class);</span><br><span class="line">                    service = constructor.newInstance(mContext);</span><br><span class="line">                &#125; catch (InstantiationException ex) &#123;</span><br><span class="line">                    throw new RuntimeException(&quot;Failed to create service &quot; + name</span><br><span class="line">                            + &quot;: service could not be instantiated&quot;, ex);</span><br><span class="line">                &#125; </span><br><span class="line">                ....</span><br><span class="line">                // Register it.</span><br><span class="line">                mServices.add(service);</span><br><span class="line"></span><br><span class="line">                // Start it.</span><br><span class="line">                try &#123;</span><br><span class="line">                    service.onStart();</span><br><span class="line">                &#125; catch (RuntimeException ex) &#123;</span><br><span class="line">                    throw new RuntimeException(&quot;Failed to start service &quot; + name</span><br><span class="line">                            + &quot;: onStart threw an exception&quot;, ex);</span><br><span class="line">                &#125;</span><br><span class="line">                return service;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>创建TelecomLoaderService系统服务，将系统默认的SMS应用，拨号应用以及SIM通话管理应用（不知道这个什么鬼）告知PackageManagerService(PMS)，以便在适当的时候可以找到应用。</p><ul><li>首先，注册默认应用(SMS/Dialer etc)通知对象，以便这些应用发送变更（如下载了一个第三方的SMS应用时，可以通知系统这一变化）；</li><li>接着，注册运营商配置变化的广播接收器，如果配置有变化时，系统会收到通知；</li><li>绑定TelecomService，并将其注册到系统中。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class TelecomLoaderService extends SystemService &#123;</span><br><span class="line"></span><br><span class="line">        private static final ComponentName SERVICE_COMPONENT = new ComponentName(</span><br><span class="line">                &quot;com.android.server.telecom&quot;,</span><br><span class="line">                &quot;com.android.server.telecom.components.TelecomService&quot;);</span><br><span class="line"></span><br><span class="line">        private static final String SERVICE_ACTION = &quot;com.android.ITelecomService&quot;;</span><br><span class="line"></span><br><span class="line">        // 当前系统启动的阶段</span><br><span class="line">        @Override</span><br><span class="line">        public void onBootPhase(int phase) &#123;</span><br><span class="line">            if (phase == PHASE_ACTIVITY_MANAGER_READY) &#123;</span><br><span class="line">                registerDefaultAppNotifier();</span><br><span class="line">                registerCarrierConfigChangedReceiver();</span><br><span class="line">                connectToTelecom();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //绑定Telecom服务</span><br><span class="line">        private void connectToTelecom() &#123;</span><br><span class="line">            synchronized (mLock) &#123;</span><br><span class="line">                if (mServiceConnection != null) &#123;</span><br><span class="line">                    // TODO: Is unbinding worth doing or wait for system to rebind?</span><br><span class="line">                    mContext.unbindService(mServiceConnection);</span><br><span class="line">                    mServiceConnection = null;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                TelecomServiceConnection serviceConnection = new TelecomServiceConnection();</span><br><span class="line">                Intent intent = new Intent(SERVICE_ACTION);</span><br><span class="line">                intent.setComponent(SERVICE_COMPONENT);</span><br><span class="line">                int flags = Context.BIND_IMPORTANT | Context.BIND_FOREGROUND_SERVICE</span><br><span class="line">                        | Context.BIND_AUTO_CREATE;</span><br><span class="line"></span><br><span class="line">                // Bind to Telecom and register the service</span><br><span class="line">                if (mContext.bindServiceAsUser(intent, serviceConnection, flags, UserHandle.SYSTEM)) &#123;</span><br><span class="line">                    mServiceConnection = serviceConnection;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>服务绑定：<a href="https://developer.android.com/guide/components/bound-services.html" target="_blank" rel="noopener">https://developer.android.com/guide/components/bound-services.html</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class TelecomLoaderService extends SystemService &#123;</span><br><span class="line"></span><br><span class="line">        private class TelecomServiceConnection implements ServiceConnection &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">                    // Normally, we would listen for death here, but since telecom runs in the same process</span><br><span class="line">                    // as this loader (process=&quot;system&quot;) thats redundant here.</span><br><span class="line">                    try &#123;</span><br><span class="line">                        service.linkToDeath(new IBinder.DeathRecipient() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void binderDied() &#123;</span><br><span class="line">                                connectToTelecom();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;, 0);</span><br><span class="line">                        SmsApplication.getDefaultMmsApplication(mContext, false);</span><br><span class="line">                        //添加Telecom服务</span><br><span class="line">                        ServiceManager.addService(Context.TELECOM_SERVICE, service);</span><br><span class="line">                        ....</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class="line">                    connectToTelecom();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>绑定服务时，调用TelecomService的onBind接口，对整个Telecom系统进行初始化，并返回一个IBinder接口:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Implementation of the ITelecom interface.</span><br><span class="line">    */</span><br><span class="line">   public class TelecomService extends Service implements TelecomSystem.Component &#123;</span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       public IBinder onBind(Intent intent) &#123;</span><br><span class="line">           // 初始化整个Telecom系统</span><br><span class="line">           initializeTelecomSystem(this);</span><br><span class="line">           //返回IBinder接口</span><br><span class="line">           synchronized (getTelecomSystem().getLock()) &#123;</span><br><span class="line">               return getTelecomSystem().getTelecomServiceImpl().getBinder();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Telecom系统初始化，主要工作是新建一个TelecomSystem的类，在这个类中，会对整个Telecom服务的相关类都初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static void initializeTelecomSystem(Context context) &#123;</span><br><span class="line">            if (TelecomSystem.getInstance() == null) &#123;</span><br><span class="line"></span><br><span class="line">                final NotificationManager notificationManager =</span><br><span class="line">                        (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">                // 用于获取联系人</span><br><span class="line">                contactInfoHelper = new ContactInfoHelper(context);</span><br><span class="line">                // 新建一个单例模式的对象</span><br><span class="line">                TelecomSystem.setInstance(new TelecomSystem(....));</span><br><span class="line">            &#125;</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>构造一个单例TelecomSystem对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public TelecomSystem(</span><br><span class="line">                Context context,</span><br><span class="line">                /* 用户未接来电通知类（不包括已接或者拒绝的电话） */</span><br><span class="line">                MissedCallNotifierImplFactory missedCallNotifierImplFactory,</span><br><span class="line">                /* 查询来电信息 */</span><br><span class="line">                CallerInfoAsyncQueryFactory callerInfoAsyncQueryFactory,</span><br><span class="line">                /* 耳机接入状态监听 */</span><br><span class="line">                HeadsetMediaButtonFactory headsetMediaButtonFactory,</span><br><span class="line">                /* 距离传感器管理 */</span><br><span class="line">                ProximitySensorManagerFactory proximitySensorManagerFactory,</span><br><span class="line">                /* 通话时电话管理 */</span><br><span class="line">                InCallWakeLockControllerFactory inCallWakeLockControllerFactory,</span><br><span class="line">                /* 音频服务管理 */</span><br><span class="line">                AudioServiceFactory audioServiceFactory,</span><br><span class="line">                /* 蓝牙设备管理 */</span><br><span class="line">                BluetoothPhoneServiceImplFactory bluetoothPhoneServiceImplFactory,</span><br><span class="line">                BluetoothVoIPServiceImplFactory bluetoothVoIPServiceImplFactory,</span><br><span class="line">                /* 查询所有超时信息 */</span><br><span class="line">                Timeouts.Adapter timeoutsAdapter,</span><br><span class="line">                /* 响铃播放 */</span><br><span class="line">                AsyncRingtonePlayer asyncRingtonePlayer,</span><br><span class="line">                /* 电话号码帮助类 */</span><br><span class="line">                PhoneNumberUtilsAdapter phoneNumberUtilsAdapter,</span><br><span class="line">                /* 通话时阻断通知 */</span><br><span class="line">                InterruptionFilterProxy interruptionFilterProxy) &#123;</span><br><span class="line">            mContext = context.getApplicationContext();</span><br><span class="line">            // 初始化telecom相关的feature</span><br><span class="line">            TelecomFeature.makeFeature(mContext);</span><br><span class="line">            // 初始化telecom的数据库</span><br><span class="line">            TelecomSystemDB.initialize(mContext);</span><br><span class="line">            // 创建一个PhoneAccount注册管理类</span><br><span class="line">            mPhoneAccountRegistrar = new PhoneAccountRegistrar(mContext);</span><br><span class="line">            ....</span><br><span class="line">            // 初始化通话管家，正是它负责与上层UI的交互</span><br><span class="line">            mCallsManager = new CallsManager(</span><br><span class="line">                    mContext, mLock, mContactsAsyncHelper,</span><br><span class="line">                    callerInfoAsyncQueryFactory, mMissedCallNotifier,</span><br><span class="line">                    mPhoneAccountRegistrar, headsetMediaButtonFactory,</span><br><span class="line">                    proximitySensorManagerFactory, inCallWakeLockControllerFactory,</span><br><span class="line">                    audioServiceFactory, bluetoothManager,</span><br><span class="line">                    wiredHeadsetManager, systemStateProvider,</span><br><span class="line">                    defaultDialerAdapter, timeoutsAdapter,AsyncRingtonePlayer,</span><br><span class="line">                    phoneNumberUtilsAdapter,  interruptionFilterProxy);</span><br><span class="line"></span><br><span class="line">            CallsManager.initialize(mCallsManager);</span><br><span class="line">            // 注册需要接收的广播    </span><br><span class="line">            mContext.registerReceiver(mUserSwitchedReceiver, USER_SWITCHED_FILTER);</span><br><span class="line">            mContext.registerReceiver(mUserStartingReceiver, USER_STARTING_FILTER);</span><br><span class="line">            mContext.registerReceiver(mFeatureChangedReceiver, FEATURE_CHANGED_FILTER);</span><br><span class="line">            mContext.registerReceiver(mEmergencyReceiver, EMERGENCY_STATE_CHANGED);</span><br><span class="line">            ....    </span><br><span class="line">            // 所有来电与去电的处理中转站</span><br><span class="line">            mCallIntentProcessor = new CallIntentProcessor(mContext, mCallsManager);</span><br><span class="line">            // 创建一个TelecomServiceImpl用于调用TelecomService的接口</span><br><span class="line">            mTelecomServiceImpl = new TelecomServiceImpl(</span><br><span class="line">                    mContext, mCallsManager, mPhoneAccountRegistrar,</span><br><span class="line">                    new CallIntentProcessor.AdapterImpl(),</span><br><span class="line">                    new UserCallIntentProcessorFactory() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public UserCallIntentProcessor create(Context context, UserHandle userHandle) &#123;</span><br><span class="line">                            return new UserCallIntentProcessor(context, userHandle);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    defaultDialerAdapter,</span><br><span class="line">                    new TelecomServiceImpl.SubscriptionManagerAdapterImpl(),</span><br><span class="line">                    mLock);</span><br><span class="line">            // 执行特定的初始化操作</span><br><span class="line">            initialize(mContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="Android-Telephony中的PhoneAccount到底起到个什么作用了？按照源码中的说明来理解，PhoneAccount表示了不同的接听或者拨打电话的方式，比如用户可以通过SIM卡来拨打电话，也可以拨打视频电话，抑或一个紧急通话，甚至可以通过telephony内部的接口来实现拨号，而Android正是通过PhoneAccount来区分这几种通话方式的。与之相对应的一个类PhoneAccountHandle则是用于表示哪一个用户正在使用通话服务。"><a href="#Android-Telephony中的PhoneAccount到底起到个什么作用了？按照源码中的说明来理解，PhoneAccount表示了不同的接听或者拨打电话的方式，比如用户可以通过SIM卡来拨打电话，也可以拨打视频电话，抑或一个紧急通话，甚至可以通过telephony内部的接口来实现拨号，而Android正是通过PhoneAccount来区分这几种通话方式的。与之相对应的一个类PhoneAccountHandle则是用于表示哪一个用户正在使用通话服务。" class="headerlink" title="Android Telephony中的PhoneAccount到底起到个什么作用了？按照源码中的说明来理解，PhoneAccount表示了不同的接听或者拨打电话的方式，比如用户可以通过SIM卡来拨打电话，也可以拨打视频电话，抑或一个紧急通话，甚至可以通过telephony内部的接口来实现拨号，而Android正是通过PhoneAccount来区分这几种通话方式的。与之相对应的一个类PhoneAccountHandle则是用于表示哪一个用户正在使用通话服务。"></a>Android Telephony中的PhoneAccount到底起到个什么作用了？按照源码中的说明来理解，PhoneAccount表示了不同的接听或者拨打电话的方式，比如用户可以通过SIM卡来拨打电话，也可以拨打视频电话，抑或一个紧急通话，甚至可以通过telephony内部的接口来实现拨号，而Android正是通过PhoneAccount来区分这几种通话方式的。与之相对应的一个类PhoneAccountHandle则是用于表示哪一个用户正在使用通话服务。</h5></blockquote><p>至此整个Telecom服务就启动完成了，这样Telecom服务就可以处理来电或者去电了。在接下来的一篇文章里，将分析下来电是如何在Telecom中传递与处理，然后发送到上层UI界面的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于一直负责的是Android Telephony部分的开发工作，对于通信过程的上层部分Telecom服务以及UI都没有认真研究过。最近恰好碰到一个通话方面的问题，涉及到了Telecom部分，因而就花时间仔细研究了下相关的代码。这里做一个简单的总结。这篇文章，主要以下两个部
      
    
    </summary>
    
      <category term="Telephony" scheme="https://linnok.github.io/categories/Telephony/"/>
    
    
  </entry>
  
</feed>
