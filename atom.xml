<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lion&#39;s Blog</title>
  
  <subtitle>寻找更优秀的人同行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linnok.github.io/"/>
  <updated>2019-03-09T07:56:25.837Z</updated>
  <id>https://linnok.github.io/</id>
  
  <author>
    <name>Lion heart</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人类简史札记</title>
    <link href="https://linnok.github.io/2019/03/09/%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2/"/>
    <id>https://linnok.github.io/2019/03/09/人类简史/</id>
    <published>2019-03-09T07:56:25.837Z</published>
    <updated>2019-03-09T07:56:25.837Z</updated>
    
    <content type="html"><![CDATA[<p>作为文化的中国，其实已经灭亡了。。。为什么中国人在这一百多年，老是把传统和现代，把西方文化和中国文化对立起来，为什么我们不能像欧洲那样把传统和现代的关系处理的那么好？                    ——粟宪庭</p><hr><p>写好这篇笔记的时候，刚好是3月8号，首先祝女士们都节日快乐，这个世界没有你们，就没有母亲，就没有我们，你们辛苦了。<br>最近一直在看人类简史这本书，一直是断断续续的看了一个多月吧，有时候也利用晚上加班的时间看看，白天是不会看的，毕竟得全身心的投入工作，哈哈哈！</p><p>读第一章的时候就已经喜欢上这本书和作者，在这个时间点上看这本书，也让人感触更加深刻，这本书看的很认真。很久没有系统的写过读书笔记了，以前看书偶尔会在书上写写画画的，但也没有做过系统性的总结。去年年底的时候谋生给自己做一个博客的想法，马上就查阅资料，自己动手。基于hexo引擎，代码托管在github上，给自己做了一个简单的博客。为什么要做一个自己的博客呢？1、分享的力量。我每天的工作，都会查阅很多的资料，多数也来自网上。真心感谢那些愿意把自己所学、所思分享出来的人。对IT从业者来说，特别感谢那些把自己代码都愿意贡献出来的人。2、想有个自己可以掌控的平台，自己想把界面改成啥样就啥样，同时也了解下web的常用技术。3、养成做笔记的习惯。工作的时候，会记录很多工作相关、行业相关的知识，一直都记在云笔记上面的，这方面的习惯还是很好的，一直坚持着,也为未来想要去做的事情做准备吧。这个博客也主要是分享技术相关的东西，其次就是看书或者平时的一些心得。</p><p>为什么说现在读到这本书，会觉得让人感触深刻呢？在人类历史上，去年也算发生了很多大事，像英国脱欧，贸易战阴云，华为事件等，这些事情本质上都是非常大的事情，都是会影响人类历史的事。中国经济现在也非常差，房地产、制造业、金融都很差狂。对这些事情，有点自己的看法，不一定正确，需要每个人自己去验证，没有谁的话是绝对可信的！这些就放到文末谈吧，在你阅读完这本书的大致内容以后！</p><p>人类简史的作者，主要是分四个大的部分来写这本书：1、认知革命；2、农业革命；3、人类的融合统一；4、科学革命。笔记的内容也主要是根据这条线来命名的，小标题大多都是自己根据自己记录的笔记命名的，做了分类和归纳，和书中顺序也存在出入。最后两大章：1、零碎知识2、总体心得，是自己加上去的。</p><hr><h2 id="认知革命"><a href="#认知革命" class="headerlink" title="认知革命"></a>认知革命</h2><h3 id="古代智人的特点"><a href="#古代智人的特点" class="headerlink" title="古代智人的特点"></a>古代智人的特点</h3><ul><li>这些远古时期的人类已懂得爱和玩乐，能够产生亲密的友谊，也会争地位、夺权力，不过，这些人和黑猩猩、狒狒、大象也没什么不同。</li><li>对智人来说，大脑只占身体总重约2%~3%，但在身体休息而不活动时，大脑的能量消耗却占了25%。</li><li>对于在非洲草原上这究竟是不是个好策略，事先只能说无人能知。虽然黑猩猩要讲道理绝对讲不赢智人，但它却能直接把智人像个布娃娃一样扯个稀烂。<h3 id="智人自然造成的灾难"><a href="#智人自然造成的灾难" class="headerlink" title="智人自然造成的灾难"></a>智人自然造成的灾难</h3></li><li>但相比之下，智人就像是个香蕉共和国的独裁者。我们在不久之前，还是大草原上的小可怜，整天充满恐惧和焦虑，但这也让人类更加残酷和危险。人类历史上众多的灾难，不论是生灵涂炭的战乱还是生态遭逢的浩劫，其实都是源自这场过于仓促的地位跳跃。<blockquote><p>人类的发展本身就打破了生态平衡，如果再失去对自然的尊重，未来将变得更加艰难。光是1000年后还会不会有智人存在，现在看来都令人十分怀疑，所以和200万年比起来，我们真的是小巫见大巫。</p></blockquote></li><li>即使到了现代，不过是因为肤色、方言、宗教等等微小的差异，就足以让智人彼此大动干戈、非要把对方赶尽杀绝。结合最近看到的一些事实，这些骇人听闻的事情在21世纪，在我们眼前，依旧还在发生。而远古的智人面对的可是个完全不同的人类物种，又岂能期待他们更加宽容？很有可能，当智人碰上尼安德特人的时候，就发生了史上第一次也是最严重的一次种族净化运动。</li><li>在加勒比海的几个岛上，特别是古巴岛和伊斯帕尼奥拉岛，有些地懒的粪便约是公元前5000年的。但这也正是人类第一次成功越过加勒比海抵达这两座大岛的时间。接下来，智人又将做出什么样的事情呢！智人的第一波殖民正是整个动物界最大也最快速的一场生态浩劫。</li><li>人类可以说坐上了生物学有史以来最致命物种的宝座。<h3 id="语言和虚构故事"><a href="#语言和虚构故事" class="headerlink" title="语言和虚构故事"></a>语言和虚构故事</h3></li><li>人类语言是沟通关于世界的信息的方式。然而，最重要的信息不是关于狮子和野牛，而是关于人类自己。我们的语言发展成了一种八卦的工具。根据这一理论，智人主要是一种社会性的动物，社会合作是我们得以生存和繁衍的关键。对于个人来说，光是知道狮子和野牛的下落还不够。更重要的，是要知道自己的部落里谁讨厌谁，谁跟谁在交往，谁很诚实，谁又是骗子。这些嚼舌根的人，所掌握的正是最早的第四权力，就像是记者总在向社会爆料，从而保护大众免遭欺诈和占便宜。</li><li>在认知革命之后，传说、神话、神以及宗教也应运而生。不论是人类还是许多动物，都能大喊：“小心！有狮子！”但在认知革命之后，智人就能够说出：“狮子是我们部落的守护神。”“讨论虚构的事物”正是智人语言最独特的功能。</li><li>社会学研究指出，借由八卦来维持的最大“自然”团体大约是150人。只要超过这个数字，大多数人就无法真正深入了解、八卦所有成员的生活情形。</li><li>究竟智人是怎么跨过这个门槛值，最后创造出了有数万居民的城市、有上亿人口的帝国？这里的秘密很可能就在于虚构的故事。就算是大批互不相识的人，只要同样相信某个故事，就能共同合作。</li><li>无论是现代国家、中世纪的教堂、古老的城市，或者古老的部落，任何大规模人类合作的根基，都在于某种只存在于集体想象中的虚构故事。联想到现在的公司，也就是一个公司共同的愿景和企业文化。</li><li>从没见过对方的两位律师，还是能同心协力为另一位完全陌生的人辩护，只因为他们都相信法律、正义、人权确实存在。（当然，他们也相信付的律师费确实存在。）然而，以上这些东西，其实都只存在人类自己发明并互相讲述的故事里。除了存在于人类共同的想象之外，这个宇宙中根本没有神、没有国家、没有钱、没有人权、没有法律，也没有正义。这些也只是人类发展想象出来的故事，这些都只是存在于我们的脑海里，并不是存在的事物。</li><li>事实就是所有动物只有智人能够进行贸易，而所有我们有详细证据证明存在的贸易网络都明显以虚构故事为基础。</li><li>有时候，与邻近部落的关系实在太良好，最后就结合为一，而有了共同的语言、共同的神话、共同的规范和价值。</li><li>现代人之所以要花费大把银子到国外度假，正是因为他们真正相信了浪漫的消费主义神话。</li><li>想象所建构出来的秩序总是有一夕崩溃的风险，因为这些秩序背后靠的都是虚构的故事，只要人们不再相信，一切就风云变色。现代社会的今天，很多故事还在被改写。</li><li>如果人类的基因里并没有大规模合作的生物本能，所有的合作网络究竟如何维系？简单的讲法，是人类创造出了由想象建构的秩序、发明了文字，以这两者补足我们基因中的不足。<h3 id="智人的变迁之路"><a href="#智人的变迁之路" class="headerlink" title="智人的变迁之路"></a>智人的变迁之路</h3></li><li>因此，自从认知革命之后，智人就能依据不断变化的需求迅速调整行为。这等于开启了一条采用“文化演化”的快速道路，而不再停留在“基因演化”这条总是堵车的道路上。走上这条快速道路之后，智人合作的能力一日千里，很快就远远甩掉了其他所有人类和动物物种。</li><li>在大约7万年前到3万年前之间，智人发明了船、油灯、弓箭，还有想缝制御寒衣物所不可缺少的针。</li><li>虽然专家对于确切的年代还有不同意见，但已有如山铁证显示，大约15000年前就已经有了家犬，而它们实际加入人类生活的时间还可能再往前推数千年。</li><li>骨骼化石的证据显示，远古时期的采集者比较少有饥饿或营养不良的问题，而且比起后来的农业时代，他们身高较高，也比较健康。虽然平均寿命显然只有30~40岁，但这主要是因为当时儿童早夭的情形十分普遍。</li><li>相较之下，远古的采集者通常都会吃到数十种不同的食物。他们可能早餐吃浆果和蘑菇；中餐吃水果、蜗牛和乌龟；晚餐则是来份野兔排佐野生洋葱。至于第二天，菜单又可能完全不同。正是这样的多样性，能确保远古的采集者吸收到所有必需的营养成分。<blockquote><p>证明多样性的膳食比较重要。</p></blockquote></li><li>此外，远古采集者也比较少碰到传染病的问题。农业和工业社会的传染病（像是天花、麻疹和肺结核）多半是来自家禽家畜，但这要到农业革命之后才传到人类身上。对于远古的采集者来说，狗是唯一会近距离相处的动物，所以也就没有这些问题。此外，农业和工业社会的永久居住环境通常非常紧密，但卫生条件又不佳，正是疾病的理想温床。至于采集者，他们总是一小群一小群在广阔的大地上漫游，疾病很难流行起来。</li><li>3万年前的智人已经发明了一些社会政治规范，不仅远超出我们DNA的设定，也超越了其他人类和动物物种的行为模式。</li><li>大约在35000年前就有人类抵达日本，而在大约30000年前就有人抵达中国台湾。</li></ul><hr><h2 id="史上最大的骗局——农业革命"><a href="#史上最大的骗局——农业革命" class="headerlink" title="史上最大的骗局——农业革命"></a>史上最大的骗局——农业革命</h2><h3 id="农业革命的历史"><a href="#农业革命的历史" class="headerlink" title="农业革命的历史"></a>农业革命的历史</h3><ul><li>即使到了今天，虽然人类有着种种先进科技，但食物热量超过90%的来源仍然是来自人类祖先在公元前9500年到公元前3500年间驯化的植物：小麦、稻米、玉米、马铃薯、小米和大麦。<h3 id="这是一场骗局"><a href="#这是一场骗局" class="headerlink" title="这是一场骗局"></a>这是一场骗局</h3></li><li>普遍来说，农民的工作要比采集者更辛苦，而且到头来的饮食还要更糟。农业革命可说是史上最大的一桩骗局。</li><li>人类以为自己驯化了植物，但其实是植物驯化了智人。这正是农业革命真正的本质：让更多的人却以更糟的状况活下去。</li><li>农业带来的压力影响深远，这正是后代大规模政治和社会制度的基础。但可悲的是，虽然农民勤劳不懈、希望能够保障自己未来的经济安全，但这几乎从来未曾实现。不管在任何地方，都出现了统治者和精英阶级，不仅靠着农民辛苦种出的食粮维生，还几乎全征收抢光，只留给农民勉强可过活的数量。现代社会的分化仍然在继续，精英越来越精英了。<h2 id="人类的融合统一"><a href="#人类的融合统一" class="headerlink" title="人类的融合统一"></a>人类的融合统一</h2><h3 id="历史的趋势"><a href="#历史的趋势" class="headerlink" title="历史的趋势"></a>历史的趋势</h3></li><li>然而，合久必分只是一时，分久必合才是不变的大趋势。</li><li>同样，现代的西班牙法律源于古罗马法；西班牙政治是以古罗马为基础；西班牙美食和建筑多半根源于古罗马，而不是伊比利亚半岛上的凯尔特人。</li><li>帝国正是造成民族多样性大幅减少的主因之一，可是历史演变的对错究竟又是谁来评判呢？</li><li>虽然我们无法解释历史做出的选择，但有一点可以确定：历史的选择绝不是为了人类的利益。随着历史演进，毫无证据显示人类的福祉必然提升。没有任何证据，证明对人类有益的文化就会成功扩张，而对人类无情的文化就会消失。没有任何证据，证明基督教是比摩尼教更好的选择，或证明阿拉伯帝国比波斯帝国对人类更有利。我一直坚信，在未来的五年，整个世界，政治、经济的规则，很多方面，都会重新被定义。<h3 id="金钱促进的融合"><a href="#金钱促进的融合" class="headerlink" title="金钱促进的融合"></a>金钱促进的融合</h3></li><li>可以说金钱就是一种相互信任的系统，而且还不是随随便便的某种系统：金钱正是有史以来最普遍也最有效的互信系统。原因就在于宗教信仰的重点是自己相信，但金钱信仰的重点是“别人相信。</li><li>没钱，就没有信任。等到钱渗透冲垮了社会、宗教和国家所筑成的大坝，世界就成了巨大而无情的市场。</li><li>于是，人类的经济史就像跳着微妙的舞步。我们用金钱来促进与陌生人的合作，但又害怕这会破坏人类的价值和亲密的关系。一方面，我们也想打破那些限制金钱和商业流动的社会大坝；但另一方面，我们又不断筑起新的大坝，希望保护社会、宗教和环境免受市场力量的奴役。<h3 id="融合的困境"><a href="#融合的困境" class="headerlink" title="融合的困境"></a>融合的困境</h3></li><li>中国人所称的“天命”，正是要解决全人类的问题。而现代的天命，也真的就得解决天上的问题，像是臭氧层破洞和温室气体的累积。未来的全球帝国，很有可能正是环保当道。</li><li>然而，如果要在过去500年间挑出一个最重大、具代表性的一刻，一定就是1945年7月16日上午5点29分45秒。就在这一秒，美国科学家在新墨西哥的阿拉莫戈多引爆了第一颗原子弹。从这时开始，人类不仅有了改变历史进程的能力，更有了结束历史进程的能力。</li><li>虽然每个经济学家都可能会说自己的模式最恰当，但每次出现金融危机和股市泡沫，我们就会看到主流改变；目前一般公认，我们还是不知道最佳的经济模式究竟为何。<h3 id="宗教的力量"><a href="#宗教的力量" class="headerlink" title="宗教的力量"></a>宗教的力量</h3></li><li>多神论除了促成一神教，也促成了一些二元论的宗教。二元论宗教信奉着善与恶这两种对立力量的存在。二元论与一神论不同之处在于，他们相信“恶”也是独立存在，既不是由代表“善”的神所创造，也不归神所掌管。二元论认为，整个宇宙就是这两股力量的战场，世间种种就是两方斗争的体现。另一个关键的二元论概念（特别在诺斯替教和摩尼教），就是认为身体和灵魂、物质和精神是有清楚区隔的。诺斯替教和摩尼教认为，善神创造了精神和灵魂，而恶神创造了物质和身体。根据这种观点，人就成了善的灵魂和恶的身体之间的战场。</li><li>但在金钱和帝国之外，宗教正是第三种让人类统一的力量。以这种超人类的秩序为基础，宗教会发展出它认为具有约束力的规范和价值观。这可以说是史上最重要的革命之一，对于人类的统一有重大贡献，绝不亚于帝国或金钱。宗教的统一才是人类统一的趋势。</li><li>某个宗教如果想要将幅员广阔、族群各异的人群都收归旗下，就还必须具备另外两种特质。第一，它信奉的超人类秩序必须普世皆同，不论时空而永恒为真。第二，它还必须坚定地将这种信念传播给大众。换句话说，宗教必须同时具备“普世特质”和“推广特质”。</li><li>宗教是“一种人类规范及价值观的系统，建立在超人类的秩序之上”。</li><li>对佛教徒来说，这条“佛法”就是举世皆同的自然法则，“痛苦来自欲望”这件事举世皆同，就像在现代物理里E总是等于MC²。</li><li>自由人文主义最重要的诫命就是要保障这种“内心声音”的自由，不受外界的侵扰或伤害。而这些诫命统称为“人权”。</li><li>毕竟，科学还是得倚靠着种种宗教和意识形态信仰，才能取得经费，并将研究正当化。<h3 id="预言的欺骗性"><a href="#预言的欺骗性" class="headerlink" title="预言的欺骗性"></a>预言的欺骗性</h3></li><li>例如，假设目前石油价格是每桶90美元，而这个绝对准确的程序预测明天会涨到100美元，商人就会立刻抢进，好在预期的涨价中获利。但结果就是油价会在今天就涨到100美元，而不是明天。那明天究竟会如何？这件事就没人知道了。预测最终在科学上也是不靠谱的。</li><li>历史就这样从一个岔路走到下一个岔路，选择走某条道路而非另一条的原因总是神秘而不得而知未来我们还会走到哪个岔路口，是否对人类有利，不得而知。</li></ul><hr><h2 id="科学革命"><a href="#科学革命" class="headerlink" title="科学革命"></a>科学革命</h2><h3 id="发现自己的无知"><a href="#发现自己的无知" class="headerlink" title="发现自己的无知"></a>发现自己的无知</h3><ul><li>但不论是想当物理学家、考古学家还是政治学家，在读大学的第一年，就会有人告诉他们，要把目标放在超越爱因斯坦、施利曼（Schliemann）和韦伯所告诉我们的知识。可是在我们的教育体系里，有谁会告诉你这些知识呢？</li><li>贫困、疾病、战争、饥荒、年老和死亡看来都已不再是人类必然的命运，而只是无知造成的限制。</li><li>科学革命并不是“知识的革命”，而是“无知的革命”。<h3 id="科学革命带来的改变——骗局"><a href="#科学革命带来的改变——骗局" class="headerlink" title="科学革命带来的改变——骗局"></a>科学革命带来的改变——骗局</h3></li><li>在过去500年间，人类的力量有了前所未有的惊人成长。公元1500年时，全球智人的人口大约有5亿，但今天已经到了70亿。人类在1500年生产的商品和服务总共约合现值2500亿美元，但今天每年人类生产的价值约为60万亿美元在1500年，全人类每天总共约消耗13万亿卡路里，但今天每天要消耗1500万亿卡路里。（看看这些数字，人口增加了14倍，生产增加240倍，消耗的能量增加了115倍。）人类DNA的拷贝数，前所未有的增加，也是巨大的消耗。</li><li>一般都认为，只要以农学、经济学、医学、社会学的最新发现为基础，制定相关政策，就能消灭贫穷。</li><li>科学家本身并不一定会察觉到各种控制金钱流动的政治、经济和宗教利益，许多科学家确实只是纯粹为了求知而研究。然而，真正控制科学发展进度表的，也很少是科学家。</li><li>总之，科学研究一定得和某些宗教或意识形态联手，才有蓬勃发展的可能。意识形态能够让研究所耗的成本合理化。而代价就是意识形态能够影响科学的进程表，并且决定如何使用研究成果。因此，如果想知道人类究竟是怎样做出核弹，怎样登上月球，光是研究物理学家、生物学家和社会学家的成就还不够。我们还必须考虑到当时的思想、政治和经济力量，看看这些力量如何形塑了物理学、生物学和社会学，将它们推往某些特定的方向。</li><li>每隔几十年，我们就能找到新的能源来源，所以人类能用的能源总量其实在不断增加。</li><li>有钱人的最高指导原则是——“投资！”而我们这些其他人的最高指导原则则是——“购买！”</li><li>如果把所有人放上一个大磅秤，总重量约达3亿吨。另外，如果把所有家禽家畜（牛、猪、羊、鸡等等）也放在另一个更大的磅秤上，总重更足足达到7亿吨。但相对的是，如果把所有还幸存的大型野生动物（包括豪猪、企鹅、大象和鲸鱼等等）也拿来称，总重量已经不到1亿吨。</li><li>全球暖化、海平面上升、污染猖獗，使得地球对于人类来说也越来越不宜居住，未来很可能看到人类必须与自己引发的自然灾害不断拉扯较劲。而随着人类试图用自己的力量来对抗自然，压制整个生态系统来满足自己的需求和冲动，就可能引发越来越多无法预期的危险副作用。</li><li>如果今天发生核灾而让世界末日降临，这些顽强的动物很有可能就会从闷烧的废墟里爬出来，准备好继续将自己的DNA传给千代万代。或许，现在的6500万年后，会有一群高智商的老鼠心怀感激地回顾人类造成的这场灾难，就像我们现在感谢那颗杀死恐龙的陨石一般。</li><li>全球暖化、海平面上升、污染猖獗，使得地球对于人类来说也越来越不宜居住，未来很可能看到人类必须与自己引发的自然灾害不断拉扯较劲。而随着人类试图用自己的力量来对抗自然，压制整个生态系统来满足自己的需求和冲动，就可能引发越来越多无法预期的危险副作用。</li><li>如果今天发生核灾而让世界末日降临，这些顽强的动物很有可能就会从闷烧的废墟里爬出来，准备好继续将自己的DNA传给千代万代。或许，现在的6500万年后，会有一群高智商的老鼠心怀感激地回顾人类造成的这场灾难，就像我们现在感谢那颗杀死恐龙的陨石一般。生态只会改变，而不会灭绝，就像核辐射不一定对所有的动植物都是坏处。<h3 id="死亡将至？"><a href="#死亡将至？" class="headerlink" title="死亡将至？"></a>死亡将至？</h3></li><li>他们也在开发新的药物、革命性的新疗法以及各种人造器官，这都能让人类生命延长，甚至有一天终能击败死神。</li><li>现在所有最优秀的人才可不是浪费时间为死亡赋予意义，而是忙着研究各种与疾病及老化相关的生理、荷尔蒙和基因系统。<h3 id="资本主义和信用"><a href="#资本主义和信用" class="headerlink" title="资本主义和信用"></a>资本主义和信用</h3></li><li>正是“信用”的概念，让我们能够预支未来、打造现在。而这背后有一项基本假设，就是未来的资源肯定远远超过目前的资源；只要我们使用未来的收入来投资当下，就会带来许多全新而美好的商机。</li><li>贪婪是好的，而且我们让自己过得好的时候，不只是自己得利，还能让他人受益。“利己”就是“利他”。只有自己的强大才能真正照顾到身边的人，才会减少对别人的贪婪。</li><li>资本主义的基本原则在于，因为不论是正义、自由甚至快乐都必须依赖于经济成长，所以可说经济成长就是至善（或至少十分接近）。</li><li>独裁国家不愿保障个人和其财产，于是资本也就一点一滴离开，流向那些愿意遵守法制、保护私有财产的国家。</li><li>有一些宗教（例如基督教和纳粹）杀害了数百万人，原因是出于仇恨。然而，资本主义也杀害了数百万人，原因则是出于冷漠和贪婪。除了宗教和资本，这个世界一定还要有法治。<h3 id="资本的规则该如何继续"><a href="#资本的规则该如何继续" class="headerlink" title="资本的规则该如何继续"></a>资本的规则该如何继续</h3></li><li>然而，就像农业革命一样，所谓的现代经济成长也可能只是个巨大的骗局。虽然人类和全球经济看来都在继续成长，但更多的人却活在饥饿和困乏之中。也许就会出现一些有良心的商人，有信仰，出来改变这个世界的游戏规则，相信川普就是其中之一。<h3 id="帝国的未来"><a href="#帝国的未来" class="headerlink" title="帝国的未来"></a>帝国的未来</h3></li><li>现代西方认为所谓公义的世界应该是由各个独立的民族国家组成，但古代中国的概念却正好相反，认为政治分裂的时代不仅动荡不安，而且公义不行。这种看法对中国的历史产生深远的影响。每次一个帝国朝代崩溃，这种政治理论主流就让各方竞逐的势力不安于各自为政，而一心追求统一。而且事实证明，最后总能统一，只是时间早晚的问题。</li><li>但自从1945年以来，多数帝国都选择了和平的退位方式，帝国解体崩溃的过程变得相对迅速、平和且有序。今天帝国的退位也会很平和吧！</li><li>因为国际网络日渐紧密，使得多数国家无法再维持全然独立，所以其中任何一国片面宣战的机会也就大幅降低。</li><li>为了让乐观主义者和悲观主义者都能满意，或许可以说我们正在天堂和地狱的岔路口，而我们还不知道自己会朝向哪一个方向。历史还没告诉我们该挑哪边，而只要发生某些巧合，往哪边走都不算意外。确实到了人类做出新的选择的时候了，也许还没有，只是真正全球帝国的真正形成。<h3 id="什么是幸福"><a href="#什么是幸福" class="headerlink" title="什么是幸福"></a>什么是幸福</h3></li><li>他们认为人的能力和幸福之间正好是负相关。</li><li>目前看来，对快乐与否的影响，家庭和社群要比金钱和健康来得重要。那些家庭关系紧密良好、社群互相扶持帮助的人，明显比较快乐。而那些家庭机能失调、一直无法融入某个社群的人则明显比较不快乐</li><li>而其中，婚姻又是特别重要的一项因素。多项重复研究发现，婚姻美好与感觉快乐，以及婚姻不协调与感觉痛苦，分别都呈现高度相关。</li><li>历史一再让我们看到，许多以为必然会发生的事，常常因为不可预见的阻碍而无法成真，而某些难以想象的情节，最后却成为事实。</li><li>最后，“幸福”又是什么？到目前为止，生物学研究还是没办法为“幸福”明确下个定义，也没办法客观测量“幸福”。</li><li>有些人多年来一直在寻找爱情，但等到真的找着了爱情，却还是不满足。有的开始整天担心对方可能会离开；有的又觉得自己太过屈就，应该再找更好的人。（而且，我们也都认识某些人，又担心别人离开，又觉得自己屈就）。是呀，这就是爱情真实的写照，再加上物质的束缚，到底什么才是爱情最终的归宿呢！</li><li>快乐与幸福从大的方面来说，有两个部分：一个是外在的，比如财富，家庭，爱情婚姻，以及社会环境；一个是内在的，比如身体，能力，性格。外在的因素往往难以控制，它很难随着个人的意志而发生变化。从这个角度来说，为实现个人福祉，为了避免陷入愤世嫉俗的歇斯底里，人只有努力适应外在的条件，努力调整自己的态度与看法，而不是期待去控制与改变。<h3 id="智人末日"><a href="#智人末日" class="headerlink" title="智人末日"></a>智人末日</h3></li><li>拥有神的能力，但是不负责任、贪得无厌，而且连想要什么都不知道。天下危险，恐怕莫此为甚。</li><li>光是1000年后还会不会有智人存在，现在看来都令人十分怀疑，所以和200万年比起来，我们真的是小巫见大巫。</li><li>我们刚刚踏入第三个千禧年，演化人文主义的未来仍未可知。在对抗希特勒的战争结束后的60年间，相关的禁忌挥之不去，没人提出想将人文主义和演化论结合起来、用生物学的方式来让智人“升级”。但到了今天，这种想法已经死灰复燃。虽然已经没有人说要淘汰劣等种族或民族，但许多人正思考着如何利用更先进的人类生物学知识来创造完美的人类。</li></ul><hr><h2 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h2><h3 id="人的特点"><a href="#人的特点" class="headerlink" title="人的特点"></a>人的特点</h3><ul><li>与其他动物相较，人类可说都是早产儿，许多重要器官的发育都还不够完善。然而，人类脱离子宫的时候，却像是从炉里拿出了一团刚熔化的玻璃，可以旋转、拉长，可塑性高到令人叹为观止。</li><li>宽容可不是智人的特色。</li><li>认为智人从非洲迁移到世界各地，与其他人种混种繁衍，而形成今天的人类。毕竟，现实的生物界限并不是非黑即白，而有重要的灰色地带</li><li>而目前最可能的解答，正是让人得以辩论的原因：智人之所以能征服世界，是因为有独特的语言。<h3 id="知识积累"><a href="#知识积累" class="headerlink" title="知识积累"></a>知识积累</h3><h4 id="人为什么喜欢啃骨头、吃骨髓？"><a href="#人为什么喜欢啃骨头、吃骨髓？" class="headerlink" title="人为什么喜欢啃骨头、吃骨髓？"></a>人为什么喜欢啃骨头、吃骨髓？</h4></li><li>早期石器最常见的一种用途，就是把骨头敲开，人类才能吃到里面的骨髓。有些研究人员认为，这正是人类最原始的专长。就像是啄木鸟的专长是从树干里啄出昆虫，最早的人类专长就是从骨头里取出骨髓。骨髓有什么特别的？假设我们现在看着一群狮子大口吃着一只长颈鹿。我们只能耐心等着，等它们吃饱再说。但还别急，就算狮子吃完了，旁边还有鬣狗和豺在等着，而且它们也不是好惹的；于是它们又把剩下的肉再吃干抹净。最后才轮到我们这群原始人，我们走近长颈鹿的尸体，左看看右瞧瞧，最后只能想办法去挖出唯一还能吃的组织。<h4 id="物种怎么划分？"><a href="#物种怎么划分？" class="headerlink" title="物种怎么划分？"></a>物种怎么划分？</h4></li><li>生物学家把所有生物划分成不同的“物种”。而所谓属于同一物种，就是它们会彼此交配，能够产出下一代。</li><li>然而，如果混种繁衍理论正确，那么可能在数百万年前，就已经种下了现代非洲人、欧洲人和亚洲人之间的基因差异。这点可以说是政治上一触即发的火药，可能发展出爆炸性的种族理论。<h4 id="公元前和公元后，怎么区分？"><a href="#公元前和公元后，怎么区分？" class="headerlink" title="公元前和公元后，怎么区分？"></a>公元前和公元后，怎么区分？</h4></li><li>比如2011年属于 公元2000-2099年 那么就是21世纪。2000年前就称为公元前。<h3 id="纽约的来历"><a href="#纽约的来历" class="headerlink" title="纽约的来历"></a>纽约的来历</h3>为了掌控哈德孙河这个重要商业通道，西印度公司在河口的一座小岛上开拓了一个殖民地，名为“新阿姆斯特丹”（New Amsterdam）。这个殖民地不断遭受美国原住民威胁，英国人也多次入侵，最后在1664年落入英国手中。英国人将这个城市改名“纽约”（New York，即“新约克”，约克为英国郡名）。当时西印度公司曾在殖民地筑起一道墙，用来抵御英国人和美国原住民，这道墙的位置现在成了世界上最著名的街道：华尔街（Wall Street，直译为“墙街”）。<h3 id="一些历史知识"><a href="#一些历史知识" class="headerlink" title="一些历史知识"></a>一些历史知识</h3></li><li>第一个是大约在公元前1776年的《汉谟拉比法典》，这可以说是几十万古巴比伦人的合作手册；第二个是公元1776年的美国《独立宣言》，这可以说是现代数亿美国人的合作手册。</li><li>在公元前1776年，巴比伦是当时最大的城市，而巴比伦帝国也很可能是当时最大的帝国，子民超过百万，统治着大半的美索不达米亚平原，包括现代大半的伊拉克地区和部分的叙利亚和伊朗。<h3 id="历史从无正义"><a href="#历史从无正义" class="headerlink" title="历史从无正义"></a>历史从无正义</h3></li><li>研究人员就曾记录到，在不同族群之间可能有长时间的对抗，甚至还有一个“种族屠杀”的案例，一群黑猩猩有系统地几乎杀光了邻近的另一群黑猩猩。如果两头公猩猩要争夺首领地位，通常会在族群中不分公母各自寻求支持者、形成集团。集团成员的连接在于每天的亲密接触，像是拥抱、抚摸、接吻、理毛、相互帮助。就像人类在选举的时候得到处握握手、亲亲小婴儿，如果哪只黑猩猩想要争夺首领宝座，也得花上许多时间拥抱、亲吻黑猩猩宝宝，还要拍拍它们的背。看了最近的一部纪录片《王朝》，里面也有类似的情节。</li><li>讲到“神”的概念，伏尔泰就曾说：“世界上本来就没有神，但可别告诉我的仆人，免得他半夜偷偷把我宰了。”</li><li>但事实已经证明，大多数有钱人之所以有钱，只是因为他出生在有钱的家庭，而大多数穷人一辈子没钱，也就只是因为他出生在贫穷的家庭而已。</li><li>随着时间过去，种族主义还蔓延到越来越多的文化领域。例如美国的审美观就是以白人的美丽作为标准，白人的特质就是美丽的标准，浅色的皮肤、金黄的直发、小而翘的鼻子等等。至于典型的黑人特质，例如黝黑的皮肤、蓬松的黑发、扁平的鼻子，则被视为丑陋。这些成见使得原本就由想象建构出来的阶级意识更是进到意识深层，挥之不去。</li><li>这样的恶性循环可能持续几百年甚至几千年，让原本只是历史偶发事件形成的阶级制度变得根深柢固。随着时间流逝，不公不义的歧视常常只是加剧而不是改善。富者越富，而贫者越贫。教育带来进一步的教育，而无知只会造成进一步的无知。历史上过去的受害者，很可能会再次受害。而历史上过去的特权分子，他们的特权也很可能依然存在。<h3 id="信仰的力量"><a href="#信仰的力量" class="headerlink" title="信仰的力量"></a>信仰的力量</h3></li><li>我们都知道时间宝贵，拿来向根本不存在的守护神祷告岂不是一种浪费？何不把握时间吃饭、睡觉、亲亲抱抱？</li><li>人人生而平等，造物者赋予他们若干不可剥夺的权利，其中包括生命权、自由权和追求幸福的权利。</li><li>多数的信仰也以死亡作为生命意义的主要来源。<h3 id="历史真的进步了吗？"><a href="#历史真的进步了吗？" class="headerlink" title="历史真的进步了吗？"></a>历史真的进步了吗？</h3></li><li>在现代的富裕社会，平均每周的工时是40~45小时，发展中国家则是60甚至80小时；但如果是狩猎采集者，就算住在最贫瘠的地区（像是卡拉哈里沙漠），平均每周也只需要工作35-45小时。</li><li>采集者之中可能也出过像成吉思汗这种所向披靡的人物，不过统治的帝国还没有新加坡的面积大；或许也出过天才贝多芬，虽然没有交响乐团，却能用竹笛令人潸然泪下；又或是出了像穆罕默德一样的先知，不过传达的是当地某棵栎树的话，而不是什么全宇宙的造物主。不过，这些我们全部只能靠猜测。这幅沉默的帷幕如此厚重，我们连这些事情是否曾经发生都难以断定，遑论详细描述。</li><li>由此可见，为了改变现有由想象建构出的秩序，就得先用想象建构出另一套秩序才行。</li><li>身为人类，我们不可能脱离想象所建构出的秩序。每一次我们以为自己打破了监狱的高墙、迈向自由的前方，其实只是到了另一间更大的监狱，把活动范围稍稍加以扩大。</li><li>大多数的人类合作网络最后都成了压迫和剥削。</li><li>想知道原本成千上万的独立文化是如何逐渐相连、形成今天的地球村，虽然黄金和白银影响深远，但也别低估了刀剑的力量。金钱的邪恶力量也在仍然蔓延。</li></ul><hr><h2 id="总体心得"><a href="#总体心得" class="headerlink" title="总体心得"></a>总体心得</h2><p>这本书毋庸置疑绝对是一本特别好的书，首先，当然是我们能从中吸收大量的历史知识，对人类的整个发展脉络有清晰的认识。无论是从认知革命的虚构故事维持着各个社群，到农业革命，这场历史上最大的骗局，还是人类融合统一的关键要素，最后的科学革命从发现人类的无知开始，都有大量的论点和论据需要吸收。读到书最后两章的时候，对这两章的内容非常感慨，历史的发展是不是就迎来了智人的末日，科学、基因生物学的发展是不是变向的也会消灭人类本身？</p><p>作者当时也预言：“为了让乐观主义者和悲观主义者都能满意，或许可以说我们正在天堂和地狱的岔路口，而我们还不知道自己会朝向哪一个方向。历史还没告诉我们该挑哪边，而只要发生某些巧合，往哪边走都不算意外。”其实作者当时就已经预言到人类的很多规则已经出现问题。资本主义的教条是否还试用于当下？历史的规律总是会被一些偶然的事件无情打破，未来很多规则一定会被改写的。至于历史是不是会往好的方向走，我们是不是就比远古采集者过的幸福，没有结论。</p><p>人类短暂的历史，为何总上演着一幕又一幕的悲剧： 疾病、饥荒、战争导致大规模的人口死亡；黑人被奴役，当作动物一般贩卖；女性被认为比男性虚弱，因此总是被压制与剥夺的一方？个体无法掌控自己的命运，正义总是缺位，就如古人说的，”<strong>兴，百姓苦；亡，百姓苦“</strong>。可到了今天，我们有机会来审视人自身命运的时候，比对现实，或许可以看的更为清晰些：正义是一种选择，一种社会制度的安排，正义并不是天然的，而是根植于社会与文化的构建。</p><p>我们再一次站在了历史的十字路口，很多规则都会被改写，光靠资本肆意的发展是不行的，必须要有健全的规则去约束。作者在书中也说，历史的大趋势是走向统一，虽然英国现在还闹着脱欧，但是不会改变历史的大趋势，最后全球走向统一，这些都需要正义的力量来实现，而这股力量已然已经登上历史舞台，而很多人误解了他的作用。</p><p>说说我对股市的看法吧，身边的朋友每天除了谈论股市、房市、游戏，仿佛就无话可说了。我不炒股，但我对经济和投资有兴趣，平时会去了解。就今天，股市暴跌了，估计吓坏很多人。总的来说，大的背景，贸易战还没有结束，现在还处于风险高发的阶段，从投资角度来说，现在处于守势，别说增值，能够保值就不错了。感觉股市的本质应该就是一种投资而不是投机，基于你对某个公司的信任和支持，最后从中得到的汇报。</p><p>任何人说的话，都只能学习，不能直接相信，更不能人云亦云。<br>只有你怀疑一切，才会相信一切皆有可能！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为文化的中国，其实已经灭亡了。。。为什么中国人在这一百多年，老是把传统和现代，把西方文化和中国文化对立起来，为什么我们不能像欧洲那样把传统和现代的关系处理的那么好？                    ——粟宪庭&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;写好这篇笔记的时候，刚好是3月8
      
    
    </summary>
    
      <category term="读书笔记" scheme="https://linnok.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="人类简史" scheme="https://linnok.github.io/tags/%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>Mat data operation in jni and java</title>
    <link href="https://linnok.github.io/2019/03/09/Mat%20data%20operation%20in%20jni%20and%20java/"/>
    <id>https://linnok.github.io/2019/03/09/Mat data operation in jni and java/</id>
    <published>2019-03-09T07:14:23.957Z</published>
    <updated>2019-03-09T07:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Returning-Mat-object-from-native-code-to-java-in-OpenCV"><a href="#Returning-Mat-object-from-native-code-to-java-in-OpenCV" class="headerlink" title="Returning Mat object from native code to java in OpenCV"></a>Returning Mat object from native code to java in OpenCV</h3><h4 id="in-C"><a href="#in-C" class="headerlink" title="in C++:"></a>in C++:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jlong <span class="title">funC</span><span class="params">()</span></span>&#123;</span><br><span class="line">Mat *mat = <span class="keyword">new</span> Mat();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> (jlong)mat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="in-java"><a href="#in-java" class="headerlink" title="in java:"></a>in java:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> = addr;<span class="comment">// addr is return from c method funC()</span></span><br><span class="line">Mat mat = <span class="keyword">new</span> Mat(addr);</span><br></pre></td></tr></table></figure><h4 id="OpenCV-Mat数据类型指针ptr的使用"><a href="#OpenCV-Mat数据类型指针ptr的使用" class="headerlink" title="OpenCV Mat数据类型指针ptr的使用"></a>OpenCV Mat数据类型指针ptr的使用</h4><p>常用形式:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mat.ptr&lt;type&gt;(row)[col]</span><br></pre></td></tr></table></figure><p>对于Mat的ptr函数，返回的是&lt;&gt;中的模板类型指针，指向的是()中的第row行的起点,通常&lt;&gt;中的类型和Mat的元素类型应该一致<br>然后再用该指针去访问对应col列位置的元素</p><h4 id="单通道"><a href="#单通道" class="headerlink" title="单通道"></a>单通道</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cv::Mat image = cv::Mat(<span class="number">400</span>, <span class="number">600</span>, CV_8UC1); <span class="comment">//定义了一个Mat变量image。</span></span><br><span class="line">uchar * data00 = image.ptr&lt;uchar&gt;(<span class="number">0</span>); <span class="comment">//data00是指向image第一行第一个元素的指针。</span></span><br><span class="line">uchar * data10 = image.ptr&lt;uchar&gt;(<span class="number">1</span>); <span class="comment">//data10是指向image第二行第一个元素的指针。</span></span><br><span class="line">uchar * data01 = image.ptr&lt;uchar&gt;(<span class="number">0</span>)[<span class="number">1</span>];<span class="comment">//data01是指向image第一行第二个元素的指针。</span></span><br></pre></td></tr></table></figure><h4 id="多通道"><a href="#多通道" class="headerlink" title="多通道"></a>多通道</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cv::Mat image = cv::Mat(<span class="number">400</span>, <span class="number">600</span>, CV_8UC3); <span class="comment">//宽400，长600，３通道彩色图片</span></span><br><span class="line">cv::Vec3b * data000 = image.ptr&lt;cv::Vec3b&gt;(<span class="number">0</span>);</span><br><span class="line">cv::Vec3b * data100 = image.ptr&lt;cv::Vec3b&gt;(<span class="number">1</span>);</span><br><span class="line">cv::Vec3b * data001 = image.ptr&lt;cv::Vec3b&gt;(<span class="number">0</span>)[<span class="number">1</span>];</span><br><span class="line">cv::Vec3b * data</span><br></pre></td></tr></table></figure><h4 id="jni层简单打印"><a href="#jni层简单打印" class="headerlink" title="jni层简单打印"></a>jni层简单打印</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;grey.rows;i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;grey.cols*grey.channels();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//double ImgPixelVal = cvGetReal2D( grey, i, j );</span></span><br><span class="line">            LOGD(<span class="string">"print src img:%d"</span>,grey.ptr&lt;<span class="keyword">int</span>&gt;(i)[j]);</span><br><span class="line">           <span class="comment">// cout&lt;&lt;src.ptr(j)&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Returning-Mat-object-from-native-code-to-java-in-OpenCV&quot;&gt;&lt;a href=&quot;#Returning-Mat-object-from-native-code-to-java-in-OpenCV&quot; class=&quot;h
      
    
    </summary>
    
      <category term="openCV" scheme="https://linnok.github.io/categories/openCV/"/>
    
    
      <category term="openCV" scheme="https://linnok.github.io/tags/openCV/"/>
    
  </entry>
  
  <entry>
    <title>Hexo function test</title>
    <link href="https://linnok.github.io/2019/03/09/hello-world/"/>
    <id>https://linnok.github.io/2019/03/09/hello-world/</id>
    <published>2019-03-09T07:06:42.901Z</published>
    <updated>2019-03-09T07:06:42.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="插入图片测试"><a href="#插入图片测试" class="headerlink" title="插入图片测试"></a>插入图片测试</h3><p><img src="/images/hello-world0.png" alt="" title="hello"></p><h3 id="插入图片测试二次测试"><a href="#插入图片测试二次测试" class="headerlink" title="插入图片测试二次测试"></a>插入图片测试二次测试</h3><p><img src="/images/hello-world1.png" alt=""></p><h3 id="字体测试"><a href="#字体测试" class="headerlink" title="字体测试"></a>字体测试</h3><p><font color="#ff0000"><strong>不在</strong></font><font color="#ffa500"><strong>沉</strong></font>默<font color="#ffff00"><strong>中</strong></font>爆<font color="#00ff00"><strong>发</strong></font>，就在<font color="#0000ff"><strong>沉</strong></font><font color="#ff0000"><strong>默中</strong></font><font color="#800080"><strong>灭亡</strong></font>。</p><h3 id="表格测试"><a href="#表格测试" class="headerlink" title="表格测试"></a>表格测试</h3><table><thead><tr><th>header 1</th><th>header 2</th><th>jj</th></tr></thead><tbody><tr><td>kernel</td><td>内核管理相关，进程调度等</td><td>sched/fork等</td></tr><tr><td>fs</td><td>文件子系统</td><td>ext4/f2fs/fuse/debugfs/proc等</td></tr></tbody></table><h3 id="插入视频测试"><a href="#插入视频测试" class="headerlink" title="插入视频测试"></a>插入视频测试</h3><video src="/images/douyin.mp4" id="video" controls="controls" preload="auto" webkit-playsinline="true" x5-video-player-type="h5" x5-video-player-fullscreen="true" playsinline=""></video><h3 id="插入视频测试-方式2"><a href="#插入视频测试-方式2" class="headerlink" title="插入视频测试(方式2)"></a>插入视频测试(方式2)</h3><video width="100%" height="400" src="/images/douyin.mp4" controls="controls" preload="auto" webkit-playsinline="true" x5-video-player-type="h5" playsinline=""><br></video>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="hexo" scheme="https://linnok.github.io/categories/hexo/"/>
    
    
      <category term="前端" scheme="https://linnok.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="https://linnok.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android 系统服务TelecomService启动过程分析</title>
    <link href="https://linnok.github.io/2018/01/04/Android%20%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1TelecomService%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>https://linnok.github.io/2018/01/04/Android 系统服务TelecomService启动过程分析/</id>
    <published>2018-01-04T09:03:12.000Z</published>
    <updated>2019-01-25T08:33:41.591Z</updated>
    
    <content type="html"><![CDATA[<p>由于一直负责的是Android Telephony部分的开发工作，对于通信过程的上层部分Telecom服务以及UI都没有认真研究过。最近恰好碰到一个通话方面的问题，涉及到了Telecom部分，因而就花时间仔细研究了下相关的代码。这里做一个简单的总结。这篇文章，主要以下两个部分的内容：</p><ul><li>什么是Telecom服务?其作用是什么？</li><li>Telecom模块的启动与初始化过程；</li></ul><p>接下来一篇文章，主要以实际通话过程为例，分析下telephony收到来电后如何将电话信息发送到Telecom模块以及Telecom是如何处理来电。</p><h4 id="什么是Telecom服务"><a href="#什么是Telecom服务" class="headerlink" title="什么是Telecom服务"></a>什么是Telecom服务</h4><p>Telecom是Android的一个系统服务，其主要作用是管理Android系统当前的通话,如来电显示，接听电话，挂断电话等功能，在Telephony模块与上层UI之间起到了一个桥梁的作用。比如，Telephony有接收到新的来电时，首先会告知Telecom,然后由Telecom服务通知上层应用来电信息，并显示来电界面。</p><p>Telecom服务对外提供了一个接口类TelecomManager,通过其提供的接口，客户端可以查询通话状态，发送通话请求以及添加通话链接等。</p><p>从Telecom进程对应的AndroidManifest.xml文件来看，Telecom进程的用户ID跟系统进程用户ID相同，是系统的核心服务。那么，其中android:process=”system”这个属性值表示什么意思了？查看官方文档，这个表示Telecom将启动在进程system中，这样可以跟其他进程进行资源共享了（对于Android这个全局进程，就是SystemServer所在的进程）。</p><blockquote><h5 id="android-process"><a href="#android-process" class="headerlink" title="android:process"></a>android:process</h5><h5 id="By-setting-this-attribute-to-a-process-name-that’s-shared-with-another-application-you-can-arrange-for-components-of-both-applications-to-run-in-the-same-process-—-but-only-if-the-two-applications-also-share-a-user-ID-and-be-signed-with-the-same-certificate"><a href="#By-setting-this-attribute-to-a-process-name-that’s-shared-with-another-application-you-can-arrange-for-components-of-both-applications-to-run-in-the-same-process-—-but-only-if-the-two-applications-also-share-a-user-ID-and-be-signed-with-the-same-certificate" class="headerlink" title="By setting this attribute to a process name that’s shared with another application, you can arrange for components of both applications to run in the same process — but only if the two applications also share a user ID and be signed with the same certificate."></a>By setting this attribute to a process name that’s shared with another application, you can arrange for components of both applications to run in the same process — but only if the two applications also share a user ID and be signed with the same certificate.</h5><h5 id="If-the-name-assigned-to-this-attribute-begins-with-a-colon-‘-’-a-new-process-private-to-the-application-is-created-when-it’s-needed-If-the-process-name-begins-with-a-lowercase-character-a-global-process-of-that-name-is-created-A-global-process-can-be-shared-with-other-applications-reducing-resource-usage"><a href="#If-the-name-assigned-to-this-attribute-begins-with-a-colon-‘-’-a-new-process-private-to-the-application-is-created-when-it’s-needed-If-the-process-name-begins-with-a-lowercase-character-a-global-process-of-that-name-is-created-A-global-process-can-be-shared-with-other-applications-reducing-resource-usage" class="headerlink" title="If the name assigned to this attribute begins with a colon (‘:’), a new process, private to the application, is created when it’s needed. If the process name begins with a lowercase character, a global process of that name is created. A global process can be shared with other applications, reducing resource usage."></a>If the name assigned to this attribute begins with a colon (‘:’), a new process, private to the application, is created when it’s needed. If the process name begins with a lowercase character, a global process of that name is created. A global process can be shared with other applications, reducing resource usage.</h5></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">        xmlns:androidprv=&quot;http://schemas.android.com/apk/prv/res/android&quot;</span><br><span class="line">        package=&quot;com.android.server.telecom&quot;</span><br><span class="line">        android:versionCode=&quot;1&quot;</span><br><span class="line">        android:versionName=&quot;1.0.0&quot;</span><br><span class="line">        coreApp=&quot;true&quot;</span><br><span class="line">        android:sharedUserId=&quot;android.uid.system&quot;&gt;</span><br><span class="line"></span><br><span class="line">     &lt;application android:label=&quot;@string/telecommAppLabel&quot;</span><br><span class="line">            android:icon=&quot;@mipmap/ic_launcher_phone&quot;</span><br><span class="line">            android:allowBackup=&quot;false&quot;</span><br><span class="line">            android:supportsRtl=&quot;true&quot;</span><br><span class="line">            android:process=&quot;system&quot;</span><br><span class="line">            android:usesCleartextTraffic=&quot;false&quot;</span><br><span class="line">            android:defaultToDeviceProtectedStorage=&quot;true&quot;</span><br><span class="line">            android:directBootAware=&quot;true&quot;&gt;</span><br><span class="line">        ....</span><br><span class="line">        // 包含TelecomService</span><br><span class="line">        &lt;service android:name=&quot;.components.TelecomService&quot;</span><br><span class="line">                android:singleUser=&quot;true&quot;</span><br><span class="line">                android:process=&quot;system&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=&quot;android.telecom.ITelecomService&quot; /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/service&gt;</span><br><span class="line">    ....</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><h5 id="代码路径"><a href="#代码路径" class="headerlink" title="代码路径:"></a>代码路径:</h5><ul><li>/android/applications/sources/services/Telecomm/</li><li>/android/frameworks/base/telecomm/</li></ul><p>了解了什么是Telecom服务之后，就来看一看Telecom服务是如何启动与初始化的。</p><h4 id="Telecom进程的启动与初始化"><a href="#Telecom进程的启动与初始化" class="headerlink" title="Telecom进程的启动与初始化"></a>Telecom进程的启动与初始化</h4><p>在SystemServer进程初始化完成启动完系统的核心服务如==ActivityManagerService==后，就会加载系统其它服务,这其中就包含了一个与Telecom服务启动相关的系统服务专门用于加载Telecom：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void startOtherServices() &#123;</span><br><span class="line">        ....</span><br><span class="line">        //启动TelecomLoaderService系统服务，用于加载Telecom</span><br><span class="line">        mSystemServiceManager.startService(TelecomLoaderService.class);</span><br><span class="line">        // 启动telephony注册服务，用于注册监听telephony状态的接口</span><br><span class="line">        telephonyRegistry = new TelephonyRegistry(context);</span><br><span class="line">        ServiceManager.addService(&quot;telephony.registry&quot;, telephonyRegistry);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用系统服务管家SystemServiceManager的接口startService创建新的服务，并注册到系统中，最后调用onStart()启动服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public class SystemServiceManager &#123;</span><br><span class="line"></span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        public SystemService startService(String className) &#123;</span><br><span class="line">            final Class&lt;SystemService&gt; serviceClass;</span><br><span class="line">            try &#123;</span><br><span class="line">                serviceClass = (Class&lt;SystemService&gt;)Class.forName(className);</span><br><span class="line">            &#125; catch (ClassNotFoundException ex) &#123;</span><br><span class="line">                ....</span><br><span class="line">            &#125;</span><br><span class="line">            return startService(serviceClass);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 服务的class文件来创建新的服务对象(服务必须继承SystemService)</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        public &lt;T extends SystemService&gt; T startService(Class&lt;T&gt; serviceClass) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                final String name = serviceClass.getName();</span><br><span class="line">                Slog.i(TAG, &quot;Starting &quot; + name);</span><br><span class="line">                Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER, &quot;StartService &quot; + name);</span><br><span class="line"></span><br><span class="line">                // Create the service.</span><br><span class="line">                if (!SystemService.class.isAssignableFrom(serviceClass)) &#123;</span><br><span class="line">                    throw new RuntimeException(&quot;Failed to create &quot; + name</span><br><span class="line">                            + &quot;: service must extend &quot; + SystemService.class.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                final T service;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Constructor&lt;T&gt; constructor = serviceClass.getConstructor(Context.class);</span><br><span class="line">                    service = constructor.newInstance(mContext);</span><br><span class="line">                &#125; catch (InstantiationException ex) &#123;</span><br><span class="line">                    throw new RuntimeException(&quot;Failed to create service &quot; + name</span><br><span class="line">                            + &quot;: service could not be instantiated&quot;, ex);</span><br><span class="line">                &#125; </span><br><span class="line">                ....</span><br><span class="line">                // Register it.</span><br><span class="line">                mServices.add(service);</span><br><span class="line"></span><br><span class="line">                // Start it.</span><br><span class="line">                try &#123;</span><br><span class="line">                    service.onStart();</span><br><span class="line">                &#125; catch (RuntimeException ex) &#123;</span><br><span class="line">                    throw new RuntimeException(&quot;Failed to start service &quot; + name</span><br><span class="line">                            + &quot;: onStart threw an exception&quot;, ex);</span><br><span class="line">                &#125;</span><br><span class="line">                return service;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>创建TelecomLoaderService系统服务，将系统默认的SMS应用，拨号应用以及SIM通话管理应用（不知道这个什么鬼）告知PackageManagerService(PMS)，以便在适当的时候可以找到应用。</p><ul><li>首先，注册默认应用(SMS/Dialer etc)通知对象，以便这些应用发送变更（如下载了一个第三方的SMS应用时，可以通知系统这一变化）；</li><li>接着，注册运营商配置变化的广播接收器，如果配置有变化时，系统会收到通知；</li><li>绑定TelecomService，并将其注册到系统中。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class TelecomLoaderService extends SystemService &#123;</span><br><span class="line"></span><br><span class="line">        private static final ComponentName SERVICE_COMPONENT = new ComponentName(</span><br><span class="line">                &quot;com.android.server.telecom&quot;,</span><br><span class="line">                &quot;com.android.server.telecom.components.TelecomService&quot;);</span><br><span class="line"></span><br><span class="line">        private static final String SERVICE_ACTION = &quot;com.android.ITelecomService&quot;;</span><br><span class="line"></span><br><span class="line">        // 当前系统启动的阶段</span><br><span class="line">        @Override</span><br><span class="line">        public void onBootPhase(int phase) &#123;</span><br><span class="line">            if (phase == PHASE_ACTIVITY_MANAGER_READY) &#123;</span><br><span class="line">                registerDefaultAppNotifier();</span><br><span class="line">                registerCarrierConfigChangedReceiver();</span><br><span class="line">                connectToTelecom();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //绑定Telecom服务</span><br><span class="line">        private void connectToTelecom() &#123;</span><br><span class="line">            synchronized (mLock) &#123;</span><br><span class="line">                if (mServiceConnection != null) &#123;</span><br><span class="line">                    // TODO: Is unbinding worth doing or wait for system to rebind?</span><br><span class="line">                    mContext.unbindService(mServiceConnection);</span><br><span class="line">                    mServiceConnection = null;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                TelecomServiceConnection serviceConnection = new TelecomServiceConnection();</span><br><span class="line">                Intent intent = new Intent(SERVICE_ACTION);</span><br><span class="line">                intent.setComponent(SERVICE_COMPONENT);</span><br><span class="line">                int flags = Context.BIND_IMPORTANT | Context.BIND_FOREGROUND_SERVICE</span><br><span class="line">                        | Context.BIND_AUTO_CREATE;</span><br><span class="line"></span><br><span class="line">                // Bind to Telecom and register the service</span><br><span class="line">                if (mContext.bindServiceAsUser(intent, serviceConnection, flags, UserHandle.SYSTEM)) &#123;</span><br><span class="line">                    mServiceConnection = serviceConnection;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>服务绑定：<a href="https://developer.android.com/guide/components/bound-services.html" target="_blank" rel="noopener">https://developer.android.com/guide/components/bound-services.html</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class TelecomLoaderService extends SystemService &#123;</span><br><span class="line"></span><br><span class="line">        private class TelecomServiceConnection implements ServiceConnection &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">                    // Normally, we would listen for death here, but since telecom runs in the same process</span><br><span class="line">                    // as this loader (process=&quot;system&quot;) thats redundant here.</span><br><span class="line">                    try &#123;</span><br><span class="line">                        service.linkToDeath(new IBinder.DeathRecipient() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void binderDied() &#123;</span><br><span class="line">                                connectToTelecom();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;, 0);</span><br><span class="line">                        SmsApplication.getDefaultMmsApplication(mContext, false);</span><br><span class="line">                        //添加Telecom服务</span><br><span class="line">                        ServiceManager.addService(Context.TELECOM_SERVICE, service);</span><br><span class="line">                        ....</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class="line">                    connectToTelecom();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>绑定服务时，调用TelecomService的onBind接口，对整个Telecom系统进行初始化，并返回一个IBinder接口:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Implementation of the ITelecom interface.</span><br><span class="line">    */</span><br><span class="line">   public class TelecomService extends Service implements TelecomSystem.Component &#123;</span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       public IBinder onBind(Intent intent) &#123;</span><br><span class="line">           // 初始化整个Telecom系统</span><br><span class="line">           initializeTelecomSystem(this);</span><br><span class="line">           //返回IBinder接口</span><br><span class="line">           synchronized (getTelecomSystem().getLock()) &#123;</span><br><span class="line">               return getTelecomSystem().getTelecomServiceImpl().getBinder();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Telecom系统初始化，主要工作是新建一个TelecomSystem的类，在这个类中，会对整个Telecom服务的相关类都初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static void initializeTelecomSystem(Context context) &#123;</span><br><span class="line">            if (TelecomSystem.getInstance() == null) &#123;</span><br><span class="line"></span><br><span class="line">                final NotificationManager notificationManager =</span><br><span class="line">                        (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">                // 用于获取联系人</span><br><span class="line">                contactInfoHelper = new ContactInfoHelper(context);</span><br><span class="line">                // 新建一个单例模式的对象</span><br><span class="line">                TelecomSystem.setInstance(new TelecomSystem(....));</span><br><span class="line">            &#125;</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>构造一个单例TelecomSystem对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public TelecomSystem(</span><br><span class="line">                Context context,</span><br><span class="line">                /* 用户未接来电通知类（不包括已接或者拒绝的电话） */</span><br><span class="line">                MissedCallNotifierImplFactory missedCallNotifierImplFactory,</span><br><span class="line">                /* 查询来电信息 */</span><br><span class="line">                CallerInfoAsyncQueryFactory callerInfoAsyncQueryFactory,</span><br><span class="line">                /* 耳机接入状态监听 */</span><br><span class="line">                HeadsetMediaButtonFactory headsetMediaButtonFactory,</span><br><span class="line">                /* 距离传感器管理 */</span><br><span class="line">                ProximitySensorManagerFactory proximitySensorManagerFactory,</span><br><span class="line">                /* 通话时电话管理 */</span><br><span class="line">                InCallWakeLockControllerFactory inCallWakeLockControllerFactory,</span><br><span class="line">                /* 音频服务管理 */</span><br><span class="line">                AudioServiceFactory audioServiceFactory,</span><br><span class="line">                /* 蓝牙设备管理 */</span><br><span class="line">                BluetoothPhoneServiceImplFactory bluetoothPhoneServiceImplFactory,</span><br><span class="line">                BluetoothVoIPServiceImplFactory bluetoothVoIPServiceImplFactory,</span><br><span class="line">                /* 查询所有超时信息 */</span><br><span class="line">                Timeouts.Adapter timeoutsAdapter,</span><br><span class="line">                /* 响铃播放 */</span><br><span class="line">                AsyncRingtonePlayer asyncRingtonePlayer,</span><br><span class="line">                /* 电话号码帮助类 */</span><br><span class="line">                PhoneNumberUtilsAdapter phoneNumberUtilsAdapter,</span><br><span class="line">                /* 通话时阻断通知 */</span><br><span class="line">                InterruptionFilterProxy interruptionFilterProxy) &#123;</span><br><span class="line">            mContext = context.getApplicationContext();</span><br><span class="line">            // 初始化telecom相关的feature</span><br><span class="line">            TelecomFeature.makeFeature(mContext);</span><br><span class="line">            // 初始化telecom的数据库</span><br><span class="line">            TelecomSystemDB.initialize(mContext);</span><br><span class="line">            // 创建一个PhoneAccount注册管理类</span><br><span class="line">            mPhoneAccountRegistrar = new PhoneAccountRegistrar(mContext);</span><br><span class="line">            ....</span><br><span class="line">            // 初始化通话管家，正是它负责与上层UI的交互</span><br><span class="line">            mCallsManager = new CallsManager(</span><br><span class="line">                    mContext, mLock, mContactsAsyncHelper,</span><br><span class="line">                    callerInfoAsyncQueryFactory, mMissedCallNotifier,</span><br><span class="line">                    mPhoneAccountRegistrar, headsetMediaButtonFactory,</span><br><span class="line">                    proximitySensorManagerFactory, inCallWakeLockControllerFactory,</span><br><span class="line">                    audioServiceFactory, bluetoothManager,</span><br><span class="line">                    wiredHeadsetManager, systemStateProvider,</span><br><span class="line">                    defaultDialerAdapter, timeoutsAdapter,AsyncRingtonePlayer,</span><br><span class="line">                    phoneNumberUtilsAdapter,  interruptionFilterProxy);</span><br><span class="line"></span><br><span class="line">            CallsManager.initialize(mCallsManager);</span><br><span class="line">            // 注册需要接收的广播    </span><br><span class="line">            mContext.registerReceiver(mUserSwitchedReceiver, USER_SWITCHED_FILTER);</span><br><span class="line">            mContext.registerReceiver(mUserStartingReceiver, USER_STARTING_FILTER);</span><br><span class="line">            mContext.registerReceiver(mFeatureChangedReceiver, FEATURE_CHANGED_FILTER);</span><br><span class="line">            mContext.registerReceiver(mEmergencyReceiver, EMERGENCY_STATE_CHANGED);</span><br><span class="line">            ....    </span><br><span class="line">            // 所有来电与去电的处理中转站</span><br><span class="line">            mCallIntentProcessor = new CallIntentProcessor(mContext, mCallsManager);</span><br><span class="line">            // 创建一个TelecomServiceImpl用于调用TelecomService的接口</span><br><span class="line">            mTelecomServiceImpl = new TelecomServiceImpl(</span><br><span class="line">                    mContext, mCallsManager, mPhoneAccountRegistrar,</span><br><span class="line">                    new CallIntentProcessor.AdapterImpl(),</span><br><span class="line">                    new UserCallIntentProcessorFactory() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public UserCallIntentProcessor create(Context context, UserHandle userHandle) &#123;</span><br><span class="line">                            return new UserCallIntentProcessor(context, userHandle);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    defaultDialerAdapter,</span><br><span class="line">                    new TelecomServiceImpl.SubscriptionManagerAdapterImpl(),</span><br><span class="line">                    mLock);</span><br><span class="line">            // 执行特定的初始化操作</span><br><span class="line">            initialize(mContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="Android-Telephony中的PhoneAccount到底起到个什么作用了？按照源码中的说明来理解，PhoneAccount表示了不同的接听或者拨打电话的方式，比如用户可以通过SIM卡来拨打电话，也可以拨打视频电话，抑或一个紧急通话，甚至可以通过telephony内部的接口来实现拨号，而Android正是通过PhoneAccount来区分这几种通话方式的。与之相对应的一个类PhoneAccountHandle则是用于表示哪一个用户正在使用通话服务。"><a href="#Android-Telephony中的PhoneAccount到底起到个什么作用了？按照源码中的说明来理解，PhoneAccount表示了不同的接听或者拨打电话的方式，比如用户可以通过SIM卡来拨打电话，也可以拨打视频电话，抑或一个紧急通话，甚至可以通过telephony内部的接口来实现拨号，而Android正是通过PhoneAccount来区分这几种通话方式的。与之相对应的一个类PhoneAccountHandle则是用于表示哪一个用户正在使用通话服务。" class="headerlink" title="Android Telephony中的PhoneAccount到底起到个什么作用了？按照源码中的说明来理解，PhoneAccount表示了不同的接听或者拨打电话的方式，比如用户可以通过SIM卡来拨打电话，也可以拨打视频电话，抑或一个紧急通话，甚至可以通过telephony内部的接口来实现拨号，而Android正是通过PhoneAccount来区分这几种通话方式的。与之相对应的一个类PhoneAccountHandle则是用于表示哪一个用户正在使用通话服务。"></a>Android Telephony中的PhoneAccount到底起到个什么作用了？按照源码中的说明来理解，PhoneAccount表示了不同的接听或者拨打电话的方式，比如用户可以通过SIM卡来拨打电话，也可以拨打视频电话，抑或一个紧急通话，甚至可以通过telephony内部的接口来实现拨号，而Android正是通过PhoneAccount来区分这几种通话方式的。与之相对应的一个类PhoneAccountHandle则是用于表示哪一个用户正在使用通话服务。</h5></blockquote><p>至此整个Telecom服务就启动完成了，这样Telecom服务就可以处理来电或者去电了。在接下来的一篇文章里，将分析下来电是如何在Telecom中传递与处理，然后发送到上层UI界面的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于一直负责的是Android Telephony部分的开发工作，对于通信过程的上层部分Telecom服务以及UI都没有认真研究过。最近恰好碰到一个通话方面的问题，涉及到了Telecom部分，因而就花时间仔细研究了下相关的代码。这里做一个简单的总结。这篇文章，主要以下两个部
      
    
    </summary>
    
      <category term="Telephony" scheme="https://linnok.github.io/categories/Telephony/"/>
    
    
  </entry>
  
</feed>
